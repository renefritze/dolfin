# Copyright (C) 2014 August Johansson and Anders Logg
#
# Licensed under the GNU LGPL, version 3 or any later version.
#
# First added:  2015-05-28
# Last changed: 2015-06-04
#
# This module defines the bilinear form a(u, v) and linear form L(v)
# for a multimesh formulation of the Stokes equations.

from ufl import *

ORDER = 3

def stokes(domain):

    # Define element
    P2 = VectorElement("Lagrange", domain, ORDER)
    P1 = FiniteElement("Lagrange", domain, ORDER - 1)
    TH = P2 * P1

    # Define trial and test functions and right-hand side
    (u, p) = TrialFunctions(TH)
    (v, q) = TestFunctions(TH)
    (U, P) = Coefficients(TH)
    f = Coefficient(P2)

    # Define facet normal and mesh size
    n = FacetNormal(domain)
    h = 2.0*Circumradius(domain)

    # Define custom measures (FIXME: prettify this)
    dc0 = dc(0, metadata={"num_cells": 1})
    dc1 = dc(1, metadata={"num_cells": 2})
    dc2 = dc(2, metadata={"num_cells": 2})

    # Define measures for integration
    dX = dx + dc0 # domain integral
    di = dc1      # interface integral
    do = dc2      # overlap integral

    # Define constants for stabilization terms
    beta_1 = Constant(domain)
    beta_2 = Constant(domain)

    # Parameters
    alpha = 10.0*ORDER*ORDER

    def tensor_jump(v, n):
        return outer(v('+'), n('+')) + outer(v('-'), n('-'))

    # Standard Nitsche
    def a_h(v, w):
        return inner(grad(v), grad(w))*dX \
            - inner(avg(grad(v)), tensor_jump(w, n))*di \
            - inner(avg(grad(w)), tensor_jump(v, n))*di \
            + alpha/avg(h) * inner(jump(v), jump(w))*di

    # Jump stabilization (formerly s_h)
    def a_O(v, w):
        return inner(jump(grad(v)), jump(grad(w)))*do

    # Mixed
    def b_h(v, q):
        return -div(v)*q*dX + jump(v, n)*avg(q)*di

    # Least squares stab
    def d_h(v, q, w, r):
        return h*h*inner(-div(grad(v)) + grad(q),
                         -div(grad(w)) - grad(r))*dc0

    # Least squares stab in rhs
    def d_h_rhs(v, q, f):
        return h*h*inner(f, -div(grad(v)) - grad(q))*dc0

    # Right-hand side
    def l_h(v):
        return dot(f, v)*dX

    # Standard forms for debugging
    def _a_h(v, w):
        return inner(grad(v), grad(w))*dx + inner(grad(v), grad(w))*dc0
    def _b_h(v, q):
        return -div(v)*q*dx
    def _l_h(v):
        return dot(f, v)*dx + dot(f, v)*dc0

    # Bilinear form
    a  = a_h(u, v)
    a += b_h(v, p) + b_h(u, q)
    a += beta_1*a_O(u, v)
    a += beta_2*d_h(u, p, v, q)

    # Linear form
    L  = l_h(v)
    L += beta_2*d_h_rhs(v, q, f)

    # Functional: squared L2 norm of velocity
    M = dot(U, U)*dx

    return a, L, M

# Create forms
a, L, M = stokes(triangle)
