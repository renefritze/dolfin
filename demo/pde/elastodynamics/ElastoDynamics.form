# Copyright (c) 2009 Mirko Maraldi and Garth N. Wells.
# Licensed under the GNU LGPL Version 2.1
#
# First added:  2009-01-22
# Last changed: 2009
#
# The bilinear form and linear form for linear elastodynamics
# using the generalised-alpha method
#
# Compile this form with FFC: ffc -l dolfin ElastoDynamics.form.

element   = VectorElement("Lagrange", "triangle", 1)
vconstant = VectorElement("Discontinuous Lagrange", "triangle", 0)
constant  = FiniteElement("Discontinuous Lagrange", "triangle", 0)

# Test and trial functions
r = TestFunction (element)
u = TrialFunction(element)

# Fields from previous time step
u0      = Function(element)   # displacement
v0      = Function(element)   # velocity
a0      = Function(element)   # acceleration
p0      = Function(element)   # external load

# External forces
f       = Function(vconstant) # body forces
p       = Function(element)   # externally applied loads

# Material parameters
rho     = Function(constant)  # mass density
eta     = Function(constant)  # damping coefficient
lmbda   = Function(constant)  # Lame coefficient
mu      = Function(constant)  # Lame coefficient

# Time stepping parameters
alpha_m = Function(constant)
alpha_f = Function(constant)
beta    = Function(constant)
gamma   = Function(constant)
dt      = Function(constant)



factor1  = rho*(1.0-alpha_m)/(beta*dt*dt)
factor2  = rho*(1.0-alpha_m)/(beta*dt)
factor3  = rho*(1.0-alpha_m-2.0*beta)/(2.0*beta)

# Strain tensor
def eps(r):
    return 0.5*(grad(r) + transp(grad(r)))

# Stress tensor
def sigma(r):
    return 2.0*mult(mu, eps(r)) + mult(lmbda, mult(trace(eps(r)), Identity(len(r))))

# Forms
a = factor1*dot(r, u)*dx  + (1.0-alpha_f)*dot(grad(r), sigma(u))*dx
L = factor1*dot(r, u0)*dx + factor2*dot(r, v0)*dx + factor3*dot(r, a0)*dx  \
   - alpha_f*dot(grad(r), sigma(u0))*dx \
   + dot(r, f)*dx + (1.0-alpha_f)*dot(r, p)*ds(3) + alpha_f*dot(r, p0)*ds(3)

