# Copyright (C) 2009 Harish Narayanan.
# Licensed under the GNU LGPL Version 2.1.
#
# First added:  2009-09-29
# Last changed: 
#
# The bilinear form a(v, u) and linear form L(v) for
# a hyperelastic model.
#
# Compile this form with FFC: ffc -l dolfin HyperElasticity.ufl.

# Function spaces
element = VectorElement("Lagrange", "tetrahedron", 1)

# Re-define correct gradient
def Grad(v):
    return grad(v).T

# Functions
v  = TestFunction(element)      # Test function
du = TrialFunction(element)     # Incremental displacement
u  = Function(element)          # Displacement from previous iteration

B  = Function(element)          # Body force per unit mass
T  = Function(element)          # Traction force on the boundary

# Kinematics
I = Identity(v.cell().d)        # Identity tensor
F = I + Grad(u)                 # Deformation gradient
C = F.T*F                       # Right Cauchy-Green tensor
E = (C - I)/2                   # Euler-Lagrange strain tensor
E = variable(E)

# Material constants
mu    = Constant("tetrahedron") # Lame's constants
lmbda = Constant("tetrahedron")

# Strain energy function (material model)
psi = lmbda/2*(tr(E)**2) + mu*tr(E*E)

S = diff(psi, E)                # Second Piola-Kirchhoff stress tensor
P = F*S                         # First Piola-Kirchoff stress tensor

# The variational problem corresponding to hyperelasticity
L = inner(P, Grad(v))*dx - inner(B, v)*dx - inner(T, v)*ds
a  = derivative(L, u, du)

