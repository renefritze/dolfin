# Copyright (C) 2009-2010 Harish Narayanan and Garth N. Wells
# Licensed under the GNU LGPL Version 2.1.
#
# First added:  2009-09-29
# Last changed: 2010-09-01
#
# The bilinear form a(du, v) and linear form L(v) for
# a hyperelastic model.
#
# Compile this form with FFC: ffc -l dolfin -feliminate_zeros -fprecompute_basis_const -fprecompute_ip_const HyperElasticity.ufl

# Function spaces
element = VectorElement("Lagrange", "tetrahedron", 1)

# Trial and test functions
du = TrialFunction(element)     # Incremental displacement
v  = TestFunction(element)      # Test function

# Functions
u  = Coefficient(element)       # Displacement from previous iteration
B  = Coefficient(element)       # Body force per unit mass
T  = Coefficient(element)       # Traction force on the boundary

# Kinematics
I = Identity(element.cell().d)  # Identity tensor
F = I + grad(u)                 # Deformation gradient
C = F.T*F                       # Right Cauchy-Green tensor

# Invariants of deformation tensors
Ic = tr(C)
J  = det(F)

# Elasticity parameters
mu    = Constant("tetrahedron")
lmbda = Constant("tetrahedron")

# Stored strain energy density (compressible neo-Hookean model)
psi = (mu/2)*(Ic - 3) - mu*ln(J) + (lmbda/2)*(ln(J))**2

# Total potential energy
Pi = psi*dx - inner(B, u)*dx - inner(T, u)*ds

# First variation of Pi (directional derivative about u in the direction of v)
L = derivative(Pi, u, v)

# Compute Jacobian of L
a = derivative(L, u, du)
