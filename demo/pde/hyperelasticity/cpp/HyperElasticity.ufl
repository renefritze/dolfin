# Copyright (C) 2009 Harish Narayanan.
# Licensed under the GNU LGPL Version 2.1.
#
# First added:  2009-09-29
# Last changed:
#
# The bilinear form a(v, u) and linear form L(v) for
# a hyperelastic model.
#
# Compile this form with FFC: ffc -l dolfin HyperElasticity.ufl.

# Function spaces
element = VectorElement("Lagrange", "tetrahedron", 1)

# Test and trial functions
v  = TestFunction(element)      # Test function
du = TrialFunction(element)     # Incremental displacement

# Functions
u  = Coefficient(element)          # Displacement from previous iteration
B  = Coefficient(element)          # Body force per unit mass
T  = Coefficient(element)          # Traction force on the boundary

# Kinematics
I = Identity(v.cell().d)        # Identity tensor
F = I + grad(u)                 # Deformation gradient
E = (F.T*F - I)/2               # Euler-Lagrange strain tensor

# Material constants
mu    = Constant("tetrahedron")
lmbda = Constant("tetrahedron")

# Potential energy function
psi = (lmbda/2*(tr(E)**2) + mu*tr(E*E))*dx - dot(B, u)*dx - dot(T, u)*ds

# Take directional derivative about u in the direction of v
L = derivative(psi, u, v)

# Compute Jacobian
a = derivative(L, u, du)
