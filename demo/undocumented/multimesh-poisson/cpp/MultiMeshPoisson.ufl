# Copyright (C) 2014 Anders Logg
#
# This file is part of DOLFIN.
#
# DOLFIN is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DOLFIN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with DOLFIN. If not, see <http://www.gnu.org/licenses/>.
#
# First added:  2005
# Last changed: 2014-05-20
#
# The bilinear form a(u, v) and linear form L(v) for a multimesh
# formulation of Poisson's equation.
#
# Compile this form with FFC: ffc -l dolfin MultiMeshPoisson.ufl.

# Define element
element = FiniteElement("Lagrange", triangle, 1)

# Define trial and test functions and right-hand side
u = TrialFunction(element)
v = TestFunction(element)
f = Coefficient(element)

# Define normal component and cell size
#h = 2.0*Circumradius(triangle)
#h = (h('+') + h('-'))/2

# FIXME: Vector elements currently not supported
# Define normal component (needs to be supplied as a coefficient)
DG = FiniteElement("DG", triangle, 0)
nx = Coefficient(DG)
ny = Coefficient(DG)
n = as_vector((nx, ny))

# Define custom measures (FIXME: prettify this)
dc0 = dc(0, metadata={"num_cells": 1})
dc1 = dc(1, metadata={"num_cells": 2})

# Define measures for integration
dx = dx + dc0 # domain integral
di = dc1      # interface integral

#a = inner(grad(u), grad(v))*dx \
#  - dot(avg(grad(u)), jump(v, n))*di \
#  - dot(avg(grad(v)), jump(u, n))*di \
#  + jump(u)*jump(v)*di

a0 = - dot(avg(grad(u)), jump(v, n))*di
a1 = - dot(avg(grad(v)), jump(u, n))*di
a2 = jump(u)*jump(v)*di
a3 = a0 + a1 + a2

a = a0

L = f*v*dx
