#!/usr/bin/env python
#
# This script submits jobs for measuring parallel speedup.

__author__ = "Johan Hake (hake@simula.no)"
__date__ = "2009-09-15 -- 2011-01-04"
__copyright__ = "Copyright (C) 2009 Johan Hake"
__license__  = "GNU LGPL Version 2.1"

# Modified by Anders Logg, 2009.

from dolfin_utils.pjobs import submit
from numpy import arange
import sys

# Parameters for benchmark
SIZE = 128

# Number of processes to use
# NOTE: Largest number of processors to run is 2^EXP
EXP = 6
num_processes = list(2**arange(EXP+1))

# Check command-line arguments
dryrun = True if 'dryrun' in sys.argv else False

# Iterate over process range
for np in num_processes:

    if np == 1:
        run_cmd = ""
    else:
        run_cmd = "mpirun.openmpi -n %d " % np

    # Submit assemble benchmark
    submit("%s./assemble-poisson %d" % (run_cmd, SIZE),
           nodes=max(1, np/8),
           ppn=8, # Grab all cores on a node
           name="assemble-poisson_np_%d_size_%d.log" % (np, SIZE),
           dryrun=dryrun)

    # Submit solve benchmark
    submit("%s./solve-poisson %d" % (run_cmd, SIZE),
           nodes=max(1, np/8),
           ppn=8, # Grab all cores on a node
           name="solve-poisson_np_%d_size_%d.log" % (np, SIZE),
           dryrun=dryrun)
