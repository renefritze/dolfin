"""This module defines some special functions (originally defined in
SpecialFunctions.h) like MeshSize and FacetNormal."""

__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2008-12-08 -- 2008-12-12"
__copyright__ = "Copyright (C) 2008 Anders Logg"
__license__  = "GNU LGPL Version 2.1"

__all__ = ["FacetNormal", "MeshSize", "AvgMeshSize", "FacetArea", "InvFacetArea","IsOutflowFacet"]

# Import FFC and SWIG-generated extension module (DOLFIN C++)
import ffc
import cpp

# Local imports
from functionspace import dim2domain, FunctionSpaceBase
from function import Function


class FacetNormal(ffc.Function, cpp.FacetNormal, Function):

    def __init__(self, mesh):
        "Create function that evaluates to the facet normal on each facet."

        domain = dim2domain[mesh.topology().dim()]
        element = ffc.VectorElement("Discontinuous Lagrange", domain, 0)

        self._V = FunctionSpaceBase(mesh, element)
        
        ffc.Function.__init__(self, element)
        cpp.FacetNormal.__init__(self, self._V)

    def function_space(self):
        " Return the function space."
        return self._V

    def __str__(self):
        return "<Function in %s>" % str(self._V)
    
    def __repr__(self):
        return ffc.Function.__repr__(self)


class MeshSize(ffc.Function, cpp.MeshSize, Function):
    def __init__(self, mesh):
        "Create function that evaluates to the local mesh size on each cell."

        domain = dim2domain[mesh.topology().dim()]
        element = ffc.FiniteElement("Discontinuous Lagrange", domain, 0)

        self._V = FunctionSpaceBase(mesh, element)

        ffc.Function.__init__(self, element)
        cpp.MeshSize.__init__(self, self._V)

    def function_space(self):
        " Return the function space."
        return self._V

    def __str__(self):
        return "<Function in %s>" % str(self._V)
    
    def __repr__(self):
        return ffc.Function.__repr__(self)


class AvgMeshSize(ffc.Function, cpp.AvgMeshSize, Function):

    def __init__(self, mesh):
        """Create function that evaluates to the average local mesh size
        over the two neighboring cells on each facet."""

        domain = dim2domain[mesh.topology().dim()]
        element = ffc.FiniteElement("Discontinuous Lagrange", domain, 0)

        self._V = FunctionSpaceBase(mesh, element)

        ffc.Function.__init__(self, element)
        cpp.AvgMeshSize.__init__(self, self._V)

    def function_space(self):
        " Return the function space."
        return self._V

    def __str__(self):
        return "<Function in %s>" % str(self._V)
    
    def __repr__(self):
        return ffc.Function.__repr__(self)


class FacetArea(ffc.Function, cpp.FacetArea, Function):

    def __init__(self, mesh):
        "Create function that evaluates to the facet area/length on each facet."

        domain = dim2domain[mesh.topology().dim()]
        element = ffc.FiniteElement("Discontinuous Lagrange", domain, 0)

        self._V = FunctionSpaceBase(mesh, element)

        ffc.Function.__init__(self, element)
        cpp.FacetArea.__init__(self, self._V)

    def function_space(self):
        " Return the function space."
        return self._V

    def __str__(self):
        return "<Function in %s>" % str(self._V)
    
    def __repr__(self):
        return ffc.Function.__repr__(self)


class InvFacetArea(ffc.Function, cpp.InvFacetArea, Function):

    def __init__(self, mesh):
        "Create function that evaluates to the inverse facet area/length on each facet."

        domain = dim2domain[mesh.topology().dim()]
        element = ffc.FiniteElement("Discontinuous Lagrange", domain, 0)

        self._V = FunctionSpaceBase(mesh, element)

        ffc.Function.__init__(self, element)
        cpp.InvFacetArea.__init__(self, self._V)

    def function_space(self):
        " Return the function space."
        return self._V

    def __str__(self):
        return "<Function in %s>" % str(self._V)
    
    def __repr__(self):
        return ffc.Function.__repr__(self)


class IsOutflowFacet(ffc.Function, cpp.IsOutflowFacet, Function):
    def __init__(self, field):
        """ Create a function that evaluates to 1.0 if the current facet
        is an outflow facet with respect to the current cell and a given
        vector field and 0.0 otherwise"""
        assert(isinstance(field,cpp.Function))
        mesh = field.function_space().mesh() 

        domain = dim2domain[mesh.topology().dim()]
        element = ffc.FiniteElement("Discontinuous Lagrange", domain, 0)

        self._V = FunctionSpaceBase(mesh, element)

        ffc.Function.__init__(self, element)
        cpp.IsOutflowFacet.__init__(self, self._V, field)
    
    def function_space(self):
        " Return the function space."
        return self._V

    def __str__(self):
        return "<Function in %s>" % str(self._V)
    
    def __repr__(self):
        return ffc.Function.__repr__(self)

