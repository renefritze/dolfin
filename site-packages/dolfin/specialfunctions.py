"""This module defines some special functions (originally defined in
SpecialFunctions.h) like MeshSize and FacetNormal."""

__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2008-12-08 -- 2008-12-12"
__copyright__ = "Copyright (C) 2008 Anders Logg"
__license__  = "GNU LGPL Version 2.1"

__all__ = ["FacetNormal", "MeshSize", "AvgMeshSize", "FacetArea", "InvFacetArea","IsOutflowFacet"]

# Import FFC and SWIG-generated extension module (DOLFIN C++)
import ffc
import cpp

# Local imports
from functionspace import dim2domain, FunctionSpaceBase

class FacetNormal(ffc.Function, cpp.FacetNormal):

    def __init__(self, mesh):
        "Create function that evaluates to the facet normal on each facet."

        domain = dim2domain[mesh.topology().dim()]
        element = ffc.VectorElement("Discontinuous Lagrange", domain, 0)

        self.V = FunctionSpaceBase(mesh, element)
        
        ffc.Function.__init__(self, element)
        cpp.FacetNormal.__init__(self, self.V)

class MeshSize(ffc.Function, cpp.MeshSize):
    def __init__(self, mesh):
        "Create function that evaluates to the local mesh size on each cell."

        domain = dim2domain[mesh.topology().dim()]
        element = ffc.FiniteElement("Discontinuous Lagrange", domain, 0)

        self.V = FunctionSpaceBase(mesh, element)

        ffc.Function.__init__(self, element)
        cpp.MeshSize.__init__(self, self.V)

class AvgMeshSize(ffc.Function, cpp.AvgMeshSize):

    def __init__(self, mesh):
        """Create function that evaluates to the average local mesh size
        over the two neighboring cells on each facet."""

        domain = dim2domain[mesh.topology().dim()]
        element = ffc.FiniteElement("Discontinuous Lagrange", domain, 0)

        self.V = FunctionSpaceBase(mesh, element)

        ffc.Function.__init__(self, element)
        cpp.AvgMeshSize.__init__(self, self.V)

class FacetArea(ffc.Function, cpp.FacetArea):

    def __init__(self, mesh):
        "Create function that evaluates to the facet area/length on each facet."

        domain = dim2domain[mesh.topology().dim()]
        element = ffc.FiniteElement("Discontinuous Lagrange", domain, 0)

        self.V = FunctionSpaceBase(mesh, element)

        ffc.Function.__init__(self, element)
        cpp.FacetArea.__init__(self, self.V)

class InvFacetArea(ffc.Function, cpp.FacetArea):

    def __init__(self, mesh):
        "Create function that evaluates to the inverse facet area/length on each facet."

        domain = dim2domain[mesh.topology().dim()]
        element = ffc.FiniteElement("Discontinuous Lagrange", domain, 0)

        self.V = FunctionSpaceBase(mesh, element)

        ffc.Function.__init__(self, element)
        cpp.InvFacetArea.__init__(self, self.V)

class IsOutflowFacet(ffc.Function, cpp.IsOutflowFacet):

    def __init__(self, field):
        
        assert(isinstance(field,cpp.Function))
        mesh = field.function_space().mesh() 

        domain = dim2domain[mesh.topology().dim()]
        element = ffc.FiniteElement("Discontinuous Lagrange", domain, 0)

        self.V = FunctionSpaceBase(mesh, element)

        ffc.Function.__init__(self, element)
        cpp.IsOutflowFacet.__init__(self, self.V, field)
    
