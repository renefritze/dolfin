# Copyright (C) 2011 Marie E. Rognes
#
# This file is part of DOLFIN.
#
# DOLFIN is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DOLFIN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with DOLFIN. If not, see <http://www.gnu.org/licenses/>.
#
# First added:  2011-06-28
# Last changed: 2011-06-28

from ufl.algorithms.analysis import extract_arguments
from ffc.errorcontrol.errorcontrolgenerators import ErrorControlGenerator

from dolfin import Function, FunctionSpace
from dolfin.fem.formmanipulations import tear, increase_order

class DOLFINErrorControlGenerator(ErrorControlGenerator):

    def __init__(self, F, M, u):

        ErrorControlGenerator.__init__(self, __import__("dolfin"), F, M, u)
        self.initialize_data()

    def initialize_data(self):

        # Primal trial element space
        self._V = self.u.function_space()

        # Extract cell and geometric dimension
        mesh = self._V.mesh()
        g_dim = mesh.topology().dim()

        # Function representing cell bubble function
        B = FunctionSpace(mesh, "B", g_dim + 1)
        self._b_T = Function(B)
        self._b_T.vector()[:] = 1.0

        # Function representing cell cone function
        C = FunctionSpace(mesh, "DG", g_dim)
        self._b_e = Function(C)

        # Discontinuous version of primal trial element space
        self._dV = tear(self._V)

        # Functions representing strong cell residual and strong facet
        # residual
        self._R_T = Function(self._dV)
        self._R_dT = Function(self._dV)

        # Define discrete dual on primal test space
        Vhat = extract_arguments(self.weak_residual)[0].function_space()
        self._z_h = Function(Vhat)
        E = increase_order(Vhat)
        self._Ez_h = Function(E)

        self._DG0 = FunctionSpace(mesh, "DG", 0)

