"This module provides a collection of small but useful utility functions."

__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2008-10-22 -- 2009-10-22"
__copyright__ = "Copyright (C) 2009 Anders Logg"
__license__  = "GNU LGPL Version 2.1"

from cpp import error, DirichletBC
from constant import Constant

def homogenize(bc):
    """Return a homogeneous version of the given boundary condition.
    If the given boundary condition is a list of boundary conditions,
    then a list of homogeneous boundary conditions is returned. Only
    Dirichlet boundary conditions are handled. Other types of boundary
    conditions (like periodic) are ignored."""

    # Handle case when boundary condition is a list
    if isinstance(bc, (list, tuple)):
        bcs = bc
        return [homogenize(bc) for bc in bcs]

    # Only consider Dirichlet boundary conditions
    if not isinstance(bc, DirichletBC):
        return bc

    # Create zero function
    V = bc.function_space_ptr()
    if V.element().value_rank() == 0:
        zero = Constant(V.mesh(), 0)
    elif V.element().value_rank() == 1:
        zero = Constant(V.mesh(), [0 for i in range(V.value_dimension(0))])
    else:
        error("Unhandled value rank %d for homogenization of boundary conditions.",
              V.value_rank())

    # Create homogeneous boundary condition
    new_bc = DirichletBC(V, zero, bc.markers())

    return new_bc
