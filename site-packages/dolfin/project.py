"""This module provides a simple way to compute the projection of
a Function (discrete or user-defined) onto a finite element space."""

__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2008-07-13 -- 2008-10-06"
__copyright__ = "Copyright (C) 2008 Anders Logg"
__license__  = "GNU LGPL Version 2.1"

__all__ = ['project']

import dolfin, ffc
from function import *
from assemble import *

def project(v, element, solver_type=dolfin.cg):

    """Return projection of given function onto the finite element space
    defined by the given element. Example usage:

        element = FiniteElement("Lagrange", "triangle", 1)

        Pv = project(v, element)

    This is useful for post-processing functions which are not readily
    handled by visualization tools (such as for example discontinuous
    functions)."""

    # Check that we get a Function
    if not isinstance(v, Function):
        error("Unable to compute projection of given object, must be a Function.")

    # Define variational problem for projection
    w = ffc.TestFunction(element)
    Pv = ffc.TrialFunction(element)
    if v.rank() == 0:
        a = w*Pv*ffc.dx
        L = w*v*ffc.dx
    else:
        a = ffc.dot(w, Pv)*ffc.dx
        L = ffc.dot(w, v)*ffc.dx

    # Assemble linear system
    A = assemble(a, v.mesh())
    b = assemble(L, v.mesh())

    # Solve linear system for projection
    Pv = Function(element, v.mesh(), dolfin.Vector())
    dolfin.solve(A, Pv.vector(), b, solver_type)

    return Pv
