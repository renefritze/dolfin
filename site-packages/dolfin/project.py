"""This module provides a simple way to compute the projection of
a Function (discrete or user-defined) onto a finite element space."""

__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2008-07-13 -- 2008-07-13"
__copyright__ = "Copyright (C) 2008 Anders Logg"
__license__  = "GNU LGPL Version 2.1"

__all__ = ['project']

import dolfin, ffc
from function import *
from assemble import *

def project(f, element, solver_type = dolfin.lu):

    """Return projection of given function onto the finite element space
    defined by the given element. Example usage:

        element = FiniteElement("Lagrange", "triangle", 1)

        g = project(f, element)

    This is useful for post-processing functions which are not readily
    handled by visualization tools (such as for example discontinuous
    functions)."""

    # Check that we get a Function
    if not isinstance(f, Function):
        error("Unable to compute projection of given object, must be a Function.")

    # Define variational problem for projection
    v = ffc.TestFunction(element)
    g = ffc.TrialFunction(element)
    if f.rank() == 0:
        a = v*g*ffc.dx
        L = v*f*ffc.dx
    else:
        a = ffc.dot(v, g)*ffc.dx
        L = ffc.dot(v, f)*ffc.dx

    # Assemble linear system
    A = assemble(a, f.mesh())
    b = assemble(L, f.mesh())

    # Solve linear system for projection
    g = Function(element, f.mesh(), dolfin.Vector())
    dolfin.solve(A, g.vector(), b, solver_type)

    return g
