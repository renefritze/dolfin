"""This module handles the PDE classes in Python. These need special
handling and are not wrapped by SWIG since they need to call the JIT
compiler."""

__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2007-08-15 -- 2008-12-03"
__copyright__ = "Copyright (C) 2007-2008 Anders Logg"
__license__  = "GNU LGPL Version 2.1"

__all__ = ["LinearPDE"]

# Import SWIG-generated extension module (DOLFIN C++)
import cpp

# Local imports
from form import *
from function import *

class LinearPDE(cpp.LinearPDE):
    """A LinearPDE represents a (system of) linear partial differential
    equation(s) in variational form: Find u in V such that
    
        a(v, u) = L(v) for all v in V',

    where a is a bilinear form and L is a linear form."""

    def __init__(self, a, L, bcs=[], matrix_type=cpp.nonsymmetric):
        "Create a linear PDE."

        # Wrap forms
        self.a = Form(a)
        self.L = Form(L)

        # Handle boundary condition argument
        if not isinstance(bcs, (list, tuple)):
            bcs = [bcs]
        self.bcs = cpp.STLVectorBoundaryConditionPtr()
        for bc in bcs:
            self.bcs.push_back(bc)

        # Initialize base class
        cpp.LinearPDE.__init__(self, self.a, self.L, self.bcs)

    def solve(self):
        "Solve linear PDE and return solution."

        # Extract trial space and create function for solution
        if not len(self.a.function_spaces) == 2:
            dolfin.error("Unable to extract trial space for solution of linear PDE, is 'a' bilinear?")
        V = self.a.function_spaces[1]
        u = Function(V)

        # Solve
        cpp.LinearPDE.solve(self, u)

        # Return solution
        return u
