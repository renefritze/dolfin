"""This module handles the PDE classes in Python. These need special
handling and are not wrapped by SWIG since they need to call the JIT
compiler."""

__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2007-08-15 -- 2008-07-07"
__copyright__ = "Copyright (C) 2007-2008 Anders Logg"
__license__  = "GNU LGPL Version 2.1"

__all__ = ["LinearPDE"]

import dolfin
from assemble import *
from function import *
from bc import *

# LinearPDE class
class LinearPDE:
    """A LinearPDE represents a (system of) linear partial differential
    equation(s) in variational form: Find u in V such that
    
        a(v, u) = L(v) for all v in V',

    where a is a bilinear form and L is a linear form."""

    def __init__(self, a, L, mesh, bcs=[]):
        "Create LinearPDE"

        self.a = a
        self.L = L
        self.mesh = mesh
        self.bcs = bcs
        self.x = dolfin.Vector()
        self.dof_maps = dolfin.DofMapSet()

        # Make sure we have a list
        if not isinstance(self.bcs, list):
            self.bcs = [self.bcs]

    def solve(self):
        "Solve PDE and return solution"

        dolfin.begin("Solving linear PDE.");
        # Assemble linear system
        (A, self.dof_maps) = assemble(self.a, self.mesh, return_dofmaps=True)
        (b, dof_maps_L)    = assemble(self.L, self.mesh, return_dofmaps=True)

        # FIXME: Maybe there is a better solution?
        # Compile form, needed to create discrete function
        (compiled_form, module, form_data) = jit(self.a)

        # Apply boundary conditions
        for bc in self.bcs:
            if isinstance(bc, DirichletBC):
                dolfin.cpp_DirichletBC.apply(bc, A, b, self.dof_maps.sub(1), compiled_form)
            elif isinstance(bc, PeriodicBC):
                dolfin.cpp_PeriodicBC.apply(bc, A, b, self.dof_maps.sub(1), compiled_form)
            else:
                raise RuntimeError("Unable to apply boundary conditions, unknown type: " + str(bc))

        #message("Matrix:")
        #A.disp()

        #message("Vector:")
        #b.disp()

        # Choose linear solver
        solver_type = dolfin.dolfin_get("PDE linear solver")
        if solver_type == "direct":
            solver = dolfin.LUSolver()
            #solver.set("parent", self)
        elif solver_type == "iterative":
            solver = dolfin.KrylovSolver(gmres)
            #solver.set("parent", self)
        else:
            error("Unknown solver type \"%s\"." % solver_type)

        # Solver linear system
        solver.solve(A, self.x, b)
        
        #message("Solution vector:")
        #self.x.disp()

        # Get trial element
        element = form_data.elements[1]
  
        # Create Function
        u = Function(element, self.mesh, self.x, self.dof_maps.sub(1), compiled_form)

        dolfin.end()

        return u
