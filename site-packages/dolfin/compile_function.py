"This module provides functionality for compilation of strings as dolfin Functions."

__author__ = "Martin Sandve Alnes (martinal@simula.no)"
__date__ = "2008-06-04 -- 2008-12-04"
__copyright__ = "Copyright (C) 2008-2008 Martin Sandve Alnes"
__license__  = "GNU LGPL Version 2.1"

# Modified by Johan Hake 2008

import re
import os
import sys
import hashlib
import numpy
import instant
import types

__all__ = ["compile_function"]

# FIXME: Extend this list, needed to autodetect variable names that are not builtins
_builtins = [
             # local symbols:
             "pi",
             # cmath funcions:
             "cos", "sin", "tan", "acos", "asin", "atan", "atan2",
             "cosh", "sinh", "tanh",
             "exp", "frexp", "ldexp", "log", "log10", "modf",
             "pow", "sqrt", "ceil", "fabs", "floor", "fmod",
            ]
_eval_args = ["v", "x"]

# Add utility code here
_header = """
// cmath functions
using std::cos;
using std::sin;
using std::tan;
using std::acos;
using std::asin;
using std::atan;
using std::atan2;
using std::cosh;
using std::sinh;
using std::tanh;
using std::exp;
using std::frexp;
using std::ldexp;
using std::log;
using std::log10;
using std::modf;
using std::pow;
using std::sqrt;
using std::ceil;
using std::fabs;
using std::floor;
using std::fmod;

const double pi = acos(-1.0);

namespace dolfin
{

"""


_function_template = """
class %(classname)s: public Function
{
public:
%(members)s

  %(classname)s(FunctionSpace & V):
    Function(V)
  {
%(constructor)s
  }

  void eval(double* values, const double* x) const
  {
%(eval)s
  }
};
"""

hash_collection = []
def expression_to_function(expr, defaults):
    "Generates code for a dolfin::Function subclass for a single expression."
    global hash_collection
    
    tmp_hash = hashlib.md5(repr(expr)).hexdigest()
    if tmp_hash in hash_collection:
        raise TypeError,"The batch-compiled expressions must be unique: %s"%str(hash_collection+[expr])
    hash_collection.append(tmp_hash)
    classname = "function_%s" % tmp_hash

    # Get shape from expr and make e a flat tuple of strings
    if isinstance(expr, str):
        expr = (expr,)
        shape = ()
    elif isinstance(expr, (tuple,list)):
        if isinstance(expr[0], str):
            shape = (len(expr),)
        elif isinstance(expr[0], (tuple,list)):
            shape = (len(expr),len(expr[0]))
            assert isinstance(expr[0][0], str)
            expr = sum(expr, ())
    else:
        raise RuntimeError("Invalid expression %s" % expr)
    
    # Autodetect variables from function strings
    variables = set()
    expr = list(expr)
    for i, c in enumerate(expr):
        # Find groups of connected alphanumeric letters
        symbols = re.findall(r"([a-zA-Z_][\w]*)", c)
        assert isinstance(symbols, list)
        variables.update(symbols)
        # Replace all x data with data.x
        # (No need with the eval(double*, double*) interface)
        #c = c.replace("x[","data.x[")
        # FIXME: A hack to get around an ambiguous overloading of
        #        dolfin::pow(double,int)
        if "pow" in symbols:
            c = c.replace("pow","std::pow")
        expr[i] = c
        
    variables.difference_update(_builtins)
    variables.difference_update(_eval_args)
    numerals = [v for v in variables if v[0] in "0123456789"]
    variables.difference_update(numerals)
    
    # Generate code for member variables
    memberscode = "\n".join("  double %s;" % name for name in variables)

    # Assert that all values in defaults are scalars
    assert(all(isinstance(val,(int,float)) for val in defaults.itervalues()))
    
    # Generate constructor code for initialization of member variables
    constructorcode = "\n".join("    %s = %s;" %(name,str(defaults.get(name,0.0)))
                                for name in variables)
    
    # Generate code for the actual function evaluation
    evalcode = "\n".join("    values[%d] = %s;" % (i, c) for (i,c) in enumerate(expr))
    
    # Connect the code fragments using the function template code
    fragments = {}
    fragments["classname"]   = classname
    fragments["members"]     = memberscode
    fragments["eval"]        = evalcode
    fragments["constructor"] = constructorcode
    code = _function_template % fragments
    return classname, code

#def generate_function_code(cppargs, defaults):
#    "Generates code for dolfin::Function subclasses for a list of expressions."
#    assert isinstance(expressions, list)
#    code = []
#    classnames = []
#    hash_collection = []
#    for i, expr in enumerate(expressions):
#        tmp_hash = hashlib.md5(repr(expr)).hexdigest()
#        if tmp_hash in hash_collection:
#            cpp.error("The batch-compiled expressions must be unique: %s"%str(expressions))
#        hash_collection.append(tmp_hash)
#        classname = "function_%s" % tmp_hash
#        code.append(expression_to_function(expr, classname, defaults[i]))
#        classnames.append(classname)
#    return "\n".join(code), classnames


# NB! This code is highly dependent on the dolfin swig setup!
_additional_declarations = r"""
%init%{
import_array();
%}

%include exception.i

%pythoncode %{
import dolfin.cpp
'''
A hack to get passed a bug in swig.
This is fixed in swig svn, and will be shipped with swig 1.3.37
%}
%import "dolfin/swig/dolfin.i"
%pythoncode %{
'''
%}
"""

def compile_function_code(code, classnames = None, module_name = None):
    # Create unique module name for this application run
    global _header, _additional_declarations
    if module_name is None:
        module_name = "dolfin_compile_function_%s" % hashlib.md5(repr(code) + repr(classnames)).hexdigest()

    # Autodetect classnames:
    _classnames = re.findall(r"class[ ]+([\w]+).*", code)
    # Just a little assertion for safety:
    if classnames is None:
        classnames = _classnames
    else:
        assert all(a == b for (a,b) in zip(classnames, _classnames))
    
    # Check cache
    compiled_module = instant.import_module(module_name)
    if compiled_module: 
        # Get the compiled class
        function_classes = [getattr(compiled_module, name) for name in classnames]
        return function_classes

    print "Calling just-in-time (JIT) compiler, this may take some time...",
    sys.stdout.flush()
    # Get system configuration   
    (includes, flags, libraries, libdirs) = instant.header_and_libs_from_pkgconfig("dolfin")
    
    # Let swig see the installed dolfin swig files
    swig_include_dirs = []
    dolfin_include_found = False
    ufc_include_found = False
    for inc_dir in includes:
        # Check if dolfin is installed in inc_dir 
        if os.path.exists(os.path.join(inc_dir, "dolfin", "swig", "dolfin.i")):
            dolfin_include_found = True
            swig_include_dirs.append(inc_dir)
        # Check if ufc is installed in inc_dir 
        if os.path.exists(os.path.join(inc_dir, "swig", "ufc.i")):
            ufc_include_found = True
            swig_include_dirs.append(inc_dir)
    
    if not dolfin_include_found:
        print "WARNING: Didn't find dolfin.i in include paths returned from pkg-config."
    if not ufc_include_found:
        print "WARNING: Didn't find ufc.i in include paths returned from pkg-config."
    
    numpy_dir = numpy.get_include()
    includes.append(numpy_dir)
    
    sysheaders = ["cmath", "iostream", "stdexcept","numpy/arrayobject.h",
                  "dolfin.h"]
    
    #cppargs = flags
    cppargs = []

    # Declare shared_ptr interface
    shared_ptr_declarations =  """
#if SWIG_VERSION >= 0x010334
// Use shared_ptr instead of shared_ptr
//#define SWIG_SHARED_PTR_NAMESPACE std
//#define SWIG_SHARED_PTR_SUBNAMESPACE tr1
%include <boost_shared_ptr.i>
//SWIG_SHARED_PTR(Function,dolfin::Function)
%s
#endif
""""%\n".join("SWIG_SHARED_PTR_DERIVED(%s,dolfin::Function,dolfin::%s)"%(c,c)
              for c in classnames)

    _code = _header + code + "\n}\n"
    # Compile extension module with instant
    compiled_module = instant.build_module(\
             code              = _code,
             additional_declarations = _additional_declarations + \
                                       shared_ptr_declarations,
             system_headers    = sysheaders,
             include_dirs      = includes,
             library_dirs      = libdirs,
             libraries         = libraries,
             swig_include_dirs = swig_include_dirs,
             cppargs           = cppargs,
             signature         = module_name
             )
    
    print "done"
    sys.stdout.flush()

    # Get the compiled class
    function_classes = [getattr(compiled_module, name) for name in classnames]
    return function_classes

def compile_function(cppargs, defaults_list):
    """Compiles a tuple of C++ expressions into a dolfin::Function class.

    If 'cppexpr' is True, 'expression' is interpreted as c++ expressions, that
    will be used to construct a Function class.

    The expression can either be a str in which case it is
    interpreted as a scalar expression and a scalar Function is generated.
    
    If the expression is a tuple consisting of more than one str it is
    interpreted as a vector expression, and a rank 1 Function is generated.
    
    A tuple of tuples of str objects is interpreted as a matrix
    expression, and a rank 2 Function is generated.

    If an expression string contains a name, it is assumed to be a scalar
    parameter name, and is added as a public member of the generated function.
    The names of these parameters are then returned in a list together with the
    compiled function class.

    If 'cppexpr' is True, 'expression' is interpreted as c++ code with complete
    implementations of a subclasses of dolfin::Function.
    
    The exceptions are set in the variable dolfin.compile_functions._builtins."""
    #, which contains:
    #    %s
    #""" % "\n".join("        " + b for b in _builtins)
    # FIXME: Hook up this to a more general debug mechanism
    global hash_collection
    sys.stdout.flush()
    assert(isinstance(cppargs,list))
    assert(isinstance(defaults_list,list))
    assert(len(cppargs)==len(defaults_list))
    code_snippets = []; classnames = []
    for cpparg, defaults in zip(cppargs,defaults_list):
        assert(isinstance(cpparg,(str,tuple,list)))
        assert(isinstance(defaults,dict) or defaults is None)
        # If the cpparg includes the word 'class' and 'Function', assume it is a c++ code snippet
        if isinstance(cpparg,str) and "class" in cpparg and "Function" in cpparg:
            # Assume that a code snippet is passed as cpparg
            code = cpparg
            
            # Get the class name
            classname = re.findall(r"class[ ]+([\w]+).*", code)[0]
        else:
            defaults = defaults or {}
            classname, code  = expression_to_function(cpparg,defaults)
        
        code_snippets.append(code)
        classnames.append(classname)
    
    # Clear the hash_collection
    hash_collection = []
    function_classes = compile_function_code("\n\n".join(code_snippets),classnames)

    return function_classes


if __name__ == "__main__":
    cn1, code1 = expression_to_function("exp(alpha)",{'alpha':1.5})
    cn2, code2 = expression_to_function(("sin(x[0])", "cos(x[1])", "0.0"),{})
    cn3, code3 = expression_to_function((("sin(x[0])", "cos(x[1])"), ("0.0", "1.0")),{})
    
    print code1
    print cn1
    
    print code2
    print cn2
    
    print code3
    print cn3
