"""This module defines a jit function that wraps the jit function for
the chosen form compiler."""

__author__ = "Johan Hake (hake@simula.no)"
__date__ = "2008-12-04 -- 2009-01-24"
__copyright__ = "Copyright (C) 2008 Johan Hake"
__license__  = "GNU LGPL Version 2.1"

# Modified by Anders Logg, 2008.

__all__ = ["jit"]

# Import SWIG-generated extension module (DOLFIN C++)
import cpp

# Import the PyDOLFIN version
from dolfin import __version__

# Import check for correct swig version from instant
from instant import check_swig_version, get_swig_version

def jit(form, options=None):
    """Just-in-time compile any provided form.

    It uses the jit function from the form compiler registered by
    dolfin_set("form compiler").
    """
    # Check that the form compiler will use the same swig version 
    # that PyDOLFIN was compiled with
    if not check_swig_version(cpp.__swigversion__,same=True):
        raise OSError, """PyDOLFIN was not compiled with the present version of swig.
Install swig version %s or recompiled PyDOLFIN with present swig
"""%cpp.__swigversion__

    # Import form compiler
    form_compiler_name = cpp.dolfin_get("form compiler")
    try:
        form_compiler = __import__(form_compiler_name)
    except ImportError:
        raise RuntimeError, "Could not import %s form compiler." % form_compiler_name
    
    # Get jit function
    try:
        jit_compile = form_compiler.jit
    except AttributeError:
        raise RuntimeError, "Form compiler must implement the jit function."
    
    # FIXME: Figure out how to handle options for different form compilers

    # Set form compiler options
    if options is None:
        options = {}
    options["cpp optimize"] = cpp.dolfin_get("optimize form") or cpp.dolfin_get("optimize")
    # Add external signatures
    options["external_signature"] = __version__ + options.get("external_signature","")
    
    return jit_compile(form, options)
