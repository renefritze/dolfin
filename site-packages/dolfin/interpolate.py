"""This module provides a simple way to compute the interpolation of
a Function (discrete or user-defined) onto a finite element space."""

__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2008-10-06 -- 2008-12-07"
__copyright__ = "Copyright (C) 2008 Anders Logg"
__license__  = "GNU LGPL Version 2.1"

__all__ = ['interpolate']

# Import FFC and SWIG-generated extension module (DOLFIN C++)
import ffc
import cpp

# Local imports
from function import *
from functionspace import *

def interpolate(v, V):

    """Return interpolation of given function v onto the finite element space V.
    Example usage:

        V = FunctionSpace(mesh, "Lagrange", 1)

        Pv = interpolate(v, V)

    This is useful for post-processing functions which are not readily
    handled by visualization tools (such as for example discontinuous
    functions)."""

    # Check arguments
    if not isinstance(v, Function):
        cpp.error("Illegal function for interpolation, not a Function: " + str(v))
    if not isinstance(V, FunctionSpaceBase):
        cpp.error("Illegal function space for interpolation, not a FunctionSpace: " + str(v))

    # Compute interpolation
    Pv = Function(V)
    v.interpolate(Pv.vector(), V)

    return Pv
