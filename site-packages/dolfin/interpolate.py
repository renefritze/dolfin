"""This module provides a simple way to compute the interpolation of
a Function (discrete or user-defined) onto a finite element space."""

__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2008-10-06 -- 2008-10-06"
__copyright__ = "Copyright (C) 2008 Anders Logg"
__license__  = "GNU LGPL Version 2.1"

__all__ = ['interpolate']

from ffc import jit
from dolfin import Vector, FiniteElement, DofMap
from function import Function
from assemble import jit

def interpolate(v, element):

    """Return interpolation of given function onto the finite element space
    defined by the given element. Example usage:

        element = FiniteElement("Lagrange", "triangle", 1)

        Pv = interpolate(v, element)

    This is useful for post-processing functions which are not readily
    handled by visualization tools (such as for example discontinuous
    functions)."""

    # Check that we get a Function
    if not isinstance(v, Function):
        error("Unable to compute interpolation of given object, must be a Function.")

    # Just-in-time compile element and dofmap
    (compiled_element, compiled_dofmap) = jit(element)
    dolfin_element = FiniteElement(compiled_element, 0)
    dolfin_dofmap  = DofMap(compiled_dofmap, v.mesh())

    # Compute interpolation
    Pv = Function(element, v.mesh(), Vector())
    v.interpolate(Pv.vector(), v.mesh(), dolfin_element, dolfin_dofmap)

    return Pv
