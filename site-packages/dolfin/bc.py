"""This module handles the BC classes in Python. These need special
handling and are not wrapped by SWIG since they need to call the JIT
compiler."""

__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2007-08-15 -- 2008-07-07"
__copyright__ = "Copyright (C) 2007-2008 Anders Logg"
__license__  = "GNU LGPL Version 2.1"

__all__ = ["DirichletBC", "PeriodicBC"]

import dolfin
from assemble import jit

# DirichletBC class (need to compile form before calling constructor)
class DirichletBC(dolfin.cpp_DirichletBC):

    def __init__(self, *args):
        "Create Dirichlet boundary condition"
        dolfin.cpp_DirichletBC.__init__(self, *args)

    def apply(self, A, b, form):
        "Apply boundary condition to linear system"
        
        # Compile form
        (compiled_form, module, form_data) = jit(form)        

        # Create dof maps
        dof_maps = dolfin.DofMapSet(compiled_form, self.mesh())
        
        # Apply boundary condition
        dolfin.cpp_DirichletBC.apply(self, A, b, dof_maps.sub(1), compiled_form)

    def zero(self, A, form):
        "Apply boundary condition to linear system"
        
        # Compile form
        (compiled_form, module, form_data) = jit(form)        

        # Create dof maps
        dof_maps = dolfin.DofMapSet(compiled_form, self.mesh())
        
        # Apply boundary condition
        dolfin.cpp_DirichletBC.zero(self, A, dof_maps.sub(1), compiled_form)

# PeriodicBC class (need to compile form before calling constructor)
class PeriodicBC(dolfin.cpp_PeriodicBC):

    def __init__(self, *args):
        "Create periodic boundary condition"
        dolfin.cpp_PeriodicBC.__init__(self, *args)

    def apply(self, A, b, form):
        "Apply boundary condition to linear system"
        
        # Compile form
        (compiled_form, module, form_data) = jit(form)        

        # Create dof maps
        dof_maps = dolfin.DofMapSet(compiled_form, self.mesh())
        
        # Apply boundary condition
        dolfin.cpp_PeriodicBC.apply(self, A, b, dof_maps.sub(1), compiled_form)
