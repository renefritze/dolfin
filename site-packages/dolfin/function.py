"""This module handles the Function class in Python.

The Function class needs special handling and is not mapped directly
by SWIG from C++ interface. Instead, a new Function class is created
which inherits both from the DOLFIN C++ Function (which is renamed to
cpp_Function in dolfin_function_pre.i) and the form compiler Function.

The resulting Function class may thus act both as a variable in a form
expression and as a Function on a mesh that may be evaluated, plotted
and stored to file.

Similarly, this module redefines the special functions defined in
SpecialFunctions.h, such as MeshSize and FacetNormal.

Note that the Function class currently inherits explicitly from the FFC
Function class. In future versions, it will instead inherit from the UFL
Function class, so that DOLFIN may be form compiler agnostic."""

__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2007-08-15 -- 2008-07-07"
__copyright__ = "Copyright (C) 2007-2008 Anders Logg"
__license__  = "GNU LGPL Version 2.1"

__all__ = ["Function", "FacetNormal", "MeshSize", "AvgMeshSize", "FacetArea", "InvFacetArea"]

import ffc
import dolfin

from assemble import jit

# Create new class inheriting from both FFC and DOLFIN Function
class Function(ffc.Function, dolfin.cpp_Function):

    def __init__(self, element, *others):
        "Create Function"

        # Check arguments
        if len(others) == 2:
            if not isinstance(others[1], (dolfin.Vector, dolfin.GenericVector)):
                error("Coefficients should be dolfin Vector or Matrix")

        # Special case, Function(element, mesh, x), need to create simple form to get arguments
        if isinstance(element, (ffc.FiniteElement, ffc.MixedElement)) and \
                len(others) == 2 and \
                isinstance(others[0], dolfin.Mesh) and \
                isinstance(others[1], (dolfin.Vector, dolfin.GenericVector)):
            mesh = others[0]
            self.x = others[1]
            # Create simplest possible form
            if element.value_dimension(0) > 1:
                form = ffc.TestFunction(element)[0]*ffc.dx
            else:
                form = ffc.TestFunction(element)*ffc.dx
            # Compile form and create dof map
            (compiled_form, module, form_data) = jit(form)
            self.dof_maps = dolfin.DofMapSet(compiled_form, mesh)
            # Initialize FFC and DOLFIN Function
            ffc.Function.__init__(self, element)
            dolfin.cpp_Function.__init__(self, mesh, self.x, self.dof_maps.sub(0), compiled_form, 0)
        # If we have an element, then give element to FFC and the rest to DOLFIN
        elif isinstance(element, (ffc.FiniteElement, ffc.MixedElement)):
            ffc.Function.__init__(self, element)
            dolfin.cpp_Function.__init__(self, *others)
        # Otherwise give all to DOLFIN
        else:
            dolfin.cpp_Function.__init__(self, *((element,) + others))

    def split(self):
        "Extract subfunctions"
        return tuple([Function(self.e0.sub_element(i), self.sub(i)) for i in range(self.numSubFunctions())])

# Create new class inheriting from both FFC and DOLFIN FacetNormal
# (FFC FacetNormal is a function that returns a FFC Function object)
class FacetNormal(ffc.Function, dolfin.cpp_FacetNormal):

    def __init__(self, shape, mesh):
        "Create FacetNormal"

        element = ffc.VectorElement("Discontinuous Lagrange", shape, 0)
        ffc.Function.__init__(self, element)
        dolfin.cpp_FacetNormal.__init__(self, mesh)

# Create new class inheriting from FFC MeshSize and DOLFIN MeshSize
# (FFC MeshSize is a function that returns a FFC Function object)
class MeshSize(ffc.Function, dolfin.cpp_MeshSize):

    def __init__(self, shape, mesh):
        "Create MeshSize"

        element = ffc.FiniteElement("Discontinuous Lagrange", shape, 0)
        ffc.Function.__init__(self, element)
        dolfin.cpp_MeshSize.__init__(self, mesh)

# Create new class inheriting from FFC MeshSize and DOLFIN AvgMeshSize
# (FFC MeshSize is a function that returns a FFC Function object)
class AvgMeshSize(ffc.Function, dolfin.cpp_AvgMeshSize):

    def __init__(self, shape, mesh):
        "Create AvgMeshSize"

        element = ffc.FiniteElement("Discontinuous Lagrange", shape, 0)
        ffc.Function.__init__(self, element)
        dolfin.cpp_AvgMeshSize.__init__(self, mesh)

# Create new class inheriting from FFC FacetArea and DOLFIN FacetArea
# (FFC FacetArea is a function that returns a FFC Function object)
class FacetArea(ffc.Function, dolfin.cpp_FacetArea):

    def __init__(self, shape, mesh):
        "Create FacetArea"

        element = ffc.FiniteElement("Discontinuous Lagrange", shape, 0)
        ffc.Function.__init__(self, element)
        dolfin.cpp_FacetArea.__init__(self, mesh)

# Create new class inheriting from FFC InvFacetArea and DOLFIN InvFacetArea
# (FFC InvFacetArea is a function that returns a FFC Function object)
class InvFacetArea(ffc.Function, dolfin.cpp_InvFacetArea):

    def __init__(self, shape, mesh):
        "Create InvFacetArea"

        element = ffc.FiniteElement("Discontinuous Lagrange", shape, 0)
        ffc.Function.__init__(self, element)
        dolfin.cpp_InvFacetArea.__init__(self, mesh)
