__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2008-12-02 -- 2009-10-06"
__copyright__ = "Copyright (C) 2008-2009 Anders Logg"
__license__  = "GNU LGPL Version 2.1"

# Modified by Johan Hake, 2008.

__all__ = ["Constant"]

# Imports SWIG-generated extension module (DOLFIN C++)
import cpp

# Local imports
from functionspace import *
from expression import *

def Constant(mesh, value):
    """Create constant-valued function with given value on mesh.
    
    The value may be either a single scalar value or a tuple/list of
    values for vector-valued functions."""

    if isinstance(value, (float, int)):
        
        # Create function space
        V = FunctionSpace(mesh, "Discontinuous Lagrange", 0)
        
        # Create C++ expression string
        cppexpr = "%.15g" % float(value)

    
    elif isinstance(value, (tuple, list)):
        
        # Create function space
        V = VectorFunctionSpace(mesh, "Discontinuous Lagrange", 0)
        
        # Create C++ expression string
        cppexpr = ["%.15g" % float(v) for v in value]

    else:

        cpp.error("Unable to create constant from expression, must be an int, float, tuple or list: " + str(value) + " (of type " + str(type(value)) + ")")

    # Create function
    return Expression(cppexpr, V = V)
