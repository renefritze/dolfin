__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2008-12-02 -- 2008-12-03"
__copyright__ = "Copyright (C) 2008 Anders Logg"
__license__  = "GNU LGPL Version 2.1"

# Modified by Johan Hake, 2008.

__all__ = ["Constant"]

# Importing ffc and the swig generated extension module of dolfin, cpp.
import ffc
import cpp

class Constant(ffc.Function, cpp.Constant):

    def __init__(self, domain, value):

        if isinstance(value, (float, int)):

            # Make sure we get a float value
            value = float(value)

            # Initialize ffc.Function
            element = ffc.FiniteElement("Discontinuous Lagrange", domain, 0)
            ffc.Function.__init__(self, element)

            # Initialize dolfin::Constant
            cpp.Constant.__init__(self, value)            

        elif isinstance(value, (tuple, list)):

            # Add values to list
            values = cpp.STLVectorDouble()
            for v in value:
                if not isinstance(v, (float, int)):
                    raise TypeError, "Only scalar and vector-valued constants supported (not tensors)."
                values.push_back(float(v))

            # Initialize ffc.Function
            element = ffc.VectorElement("Discontinuous Lagrange", domain, 0, values.size())
            ffc.Function.__init__(self, element)

            # Initialize dolfin::Constant
            cpp.Constant.__init__(self, values)
