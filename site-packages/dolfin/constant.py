__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2008-12-02 -- 2009-10-06"
__copyright__ = "Copyright (C) 2008-2009 Anders Logg"
__license__  = "GNU LGPL Version 2.1"

# Modified by Johan Hake, 2008.

__all__ = ["Constant"]

# Import UFL and SWIG-generated extension module (DOLFIN C++)
import ufl
import cpp

# Local imports
from functionspace import dim2domain

class Constant(ufl.Function, cpp.Constant):

    def __init__(self, mesh, value):
        """Create constant-valued function with given value on mesh.

        The value may be either a single scalar value or a tuple/list of
        values for vector-valued functions."""

        # Create UFL element
        domain = dim2domain[mesh.topology().dim()]
        if isinstance(value, (float, int)):
            self._ufl_element = ufl.FiniteElement("Discontinuous Lagrange", domain, 0)
        elif isinstance(value, (tuple, list)):
            self._ufl_element = ufl.VectorElement("Discontinuous Lagrange", domain, 0)
        else:
            cpp.error("Unable to handle tensor-valued constants (should be possible to fix).")

        # Initialize base classes
        ufl.Function.__init__(self, self._ufl_element)

        # FIXME: Need a typemap here
        if isinstance(value, (int, float)):
            cpp.Constant.__init__(self, mesh.geometry().dim(), value)
        elif isinstance(value, (tuple, list)):
            if len(value) == 2:
                cpp.Constant.__init__(self, mesh.geometry().dim(), value[0], value[1])
            elif len(value) == 3:
                cpp.Constant.__init__(self, mesh.geometry().dim(), value[0], value[1], value[2])
            else:
                cpp.error("Unable to handle vector-valued of length %d (should be possible to fix)." % len(value))
