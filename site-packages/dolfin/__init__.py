# Import DOLFIN wrapper module as well as additional utility entities
__version__ = "0.9.1"

# For some reason PyTrilinos needs to be loaded before the assemble module or
# else strange things happen.
try:
    from PyTrilinos import Epetra, AztecOO, TriUtils, ML
except:    
    pass

# External imports
from ffc import *

# Imports from Python code
from constants import *
from assemble import *
from constant import *
from specialfunctions import *
from function import *
from jit      import jit
from functionspace import *
from variationalproblem import *
from norm import *
from project import *
from interpolate import *
from utils import *
from errornorm import *
from dolfin_time import *
from plot   import *
from compile_functions  import compile_functions
from compile_subdomains import compile_subdomains

#--- Imports from SWIG-generated Python code (C++ interface) ---
import cpp

# Classes
#from cpp import GenericTensor, GenericMatrix, GenericVector
from cpp import Matrix, Vector, Scalar
from cpp import LinearSolver, KrylovSolver, LUSolver, SingularSolver
from cpp import BlockMatrix, BlockVector
#from cpp import Graph, GraphEditor, GraphPartition
#from cpp import UndirectedClique, DirectedClique
from cpp import File
#from cpp import Lagrange, Legendre
#from cpp import Quadrature, Variable
#from cpp import GaussQuadrature
from cpp import GaussQuadrature, RadauQuadrature, LobattoQuadrature
from cpp import Mesh, MeshEditor, MeshFunction, BoundaryMesh, SubMesh
#from cpp import MeshEntity, MeshTopology, MeshGeometry
#from cpp import MeshConnectivity, MPIMeshCommunicator, BoundaryMesh
from cpp import Vertex, Edge, Face, Facet, Cell, Point
from cpp import vertices, edges, faces, facets, cells
from cpp import SubDomain, DomainBoundary
from cpp import UnitInterval, Interval, UnitSquare, Rectangle, UnitCircle, UnitCube, Box, UnitSphere
#from cpp import DofMap, DofMapSet
from cpp import IntersectionDetector
#from cpp import BoundaryCondition
from cpp import DirichletBC, PeriodicBC
#from cpp import Form, Assembler
from cpp import Assembler
from cpp import SubSpace
#from cpp import MatrixFactory
from cpp import NewtonSolver, NonlinearProblem
from cpp import TimeDependent
from cpp import ODE
#from cpp import ComplexODE
from cpp import Progress, Timer, Table, Event
from cpp import MPI
from cpp import STLVectorUInt, STLVectorDouble

# Free functions
from cpp import dolfin_get, dolfin_add, dolfin_set, tic, toc, summary
from cpp import solve, residual, normalize
from cpp import down_cast

# Enums
from cpp import l1, l2, linf, frobenius
from cpp import symmetric, nonsymmetric
from cpp import normalize_l2norm, normalize_average
from cpp import lu, cg, gmres, bicgstab, default_solver
from cpp import jacobi, sor, ilu, icc, amg_hypre, amg_ml, default_pc
from cpp import lagrange, hermite, harmonic
from cpp import topological, geometric, pointwise

# Linear algebra backend related imports
from cpp import has_linear_algebra_backend
from cpp import DefaultFactory

# Optional package uBLAS
if has_linear_algebra_backend("uBLAS"):
    from cpp import uBLASVector, uBLASSparseMatrix, uBLASDenseMatrix
    from cpp import uBLASSparseFactory, uBLASDenseFactory
    from cpp import uBLASSparseFactory_instance, uBLASDenseFactory_instance

# Optional package petsc
if has_linear_algebra_backend("PETSc"):
    from cpp import PETScMatrix, PETScVector, PETScFactory, PETScFactory_instance

# Optional package Epetra 
if has_linear_algebra_backend("Epetra"):
    from cpp import EpetraMatrix, EpetraVector, EpetraFactory, EpetraFactory_instance

# Optional package MTL4
if has_linear_algebra_backend("MTL4"):
    from cpp import MTL4Matrix, MTL4Vector, MTL4Factory, MTL4Factory_instance

# Optional package slepc
try: 
    from cpp import SLEPcEigenSolver
except:
    pass

from numpy import sin, cos, exp

import logger
