
# Import UFL and SWIG-generated extension module (DOLFIN C++)
import ufl
import dolfin.cpp as cpp

from dolfin.functions.functionspace import MultiMeshFunctionSpace


__all__ = ["MultiMeshFunction"]

class MultiMeshFunction(ufl.Coefficient, cpp.MultiMeshFunction):
    """ Python Interface class of MultiMeshFunction"""
    def __init__(self, *args, **kwargs):
        """Initialize Function."""
        # Initial quick check for valid arguments (other checks
        # sprinkled below)
        if len(args) == 0:
            raise TypeError("expected 1 or more arguments")
        # Type switch on argument types
        if isinstance(args[0], MultiMeshFunction):
            # Not yet implemented
            raise NotImplementedError
        elif isinstance(args[0], cpp.MultiMeshFunction):
            #Not Yet Implemented
            raise NotImplementedError
        elif isinstance(args[0], cpp.MultiMeshFunctionSpace):
            V = args[0]
            # If initialising from a FunctionSpace
            if len(args) == 1:
                # If passing only the FunctionSpace
                self.__init_from_multimeshfunction_space(V)
            elif len(args) == 2:
                other = args[1]
                if isinstance(other, cpp.MultiMeshFunction):
                    self.__init_from_function_space_and_cpp_function(V, other)
                else:
                    self.__init_from_function_space_and_function(V, other)
            else:
                raise TypeError("too many arguments")

            # Keep a reference of the functionspace with additional attributes
            self._V = V
        else:
            raise TypeError("expected a MultiMeshFunctionSpace or a MultiMeshFunction as argument 1")


    def __init_from_multimeshfunction_space(self, V):
        cpp.MultiMeshFunction.__init__(self, V)
        #FIXME - Not sure what to set here
        ufl.Coefficient.__init__(self, V._parts[0].ufl_function_space())
        # ,count=V._parts[0].id()) #MultiMeshFunction ID


    def __init_from_function_space_and_function(self, V, other):
        cpp.MultiMeshFunction.__init__(self, V, other)
        ufl.Coefficient.__init__(self, V._parts[0].ufl_function_space())#, count=V._parts[0].id())


    def function_space(self):
        return self._V
