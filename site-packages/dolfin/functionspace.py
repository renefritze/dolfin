__author__ = "Johan Hake (hake@simula.no)"
__date__ = "2008-11-03 -- 2008-11-19"
__copyright__ = "Copyright (C) 2008 Johan Hake"
__license__  = "GNU LGPL Version 2.1"

# Modified by Anders Logg, 2008.

__all__ = ["FunctionSpace"]

import ffc
import dolfin

class FunctionSpaceBase(dolfin.cpp_FunctionSpace):
    "Base class for all function spaces."

    def __init__(self, mesh, element):
        "Create function space on given mesh for given finite element."

        # Check arguments
        assert(isinstance(mesh, dolfin.Mesh), "Invalid mesh: " + str(mesh))
        assert(isinstance(element, (ffc.FiniteElementBase)), "Invalid finite element: " + str(element))

        # Store element
        self.__element = element
        
        # JIT-compile element to get ufc_element and ufc_dofmap
        self.__ufc_element, self.__ufc_dofmap = ffc.jit(self.__element)

        # Instantiate DOLFIN FiniteElement and DofMap 
        self.__dolfin_element = dolfin.FiniteElement(self.__ufc_element)
        self.__dolfin_dofmap  = dolfin.DofMap(self.__ufc_dofmap, mesh)
        
        # Initialize the cpp_FunctionSpace
        dolfin.cpp_FunctionSpace.__init__(self, mesh,
                                          self.__dolfin_element,
                                          self.__dolfin_dofmap)
        
    def element(self):
        "Return the form compiler element."
        return self.__element
    
    def __str__(self):
        "Pretty print."
        return "%s function space" % self._element.__class__.__name__

class FunctionSpace(FunctionSpaceBase):
    "FunctionSpace represents a finite element function space."

    def __init__(self, mesh, family, degree):
        """Create finite element function space. The function space
        may be created by
        
            V = FunctionSpace(mesh, family, degree)

            mesh    : a Mesh
            family  : a string specifying the element family
            degree  : the degree of the element

        Which families and degrees that are supported is determined by the
        form compiler used to generate the element, but typical elements
        include

            Lagrange
            Discontinuous Lagrange
            Bubble
            Crouzeix-Raviart
            Brezzi-Douglas-Marini
            Brezzi-Douglas-Fortin-Marini
            Raviart-Thomas
            Nedelec 1st kind H(div)
            Nedelec 2nd kind H(div)
            Nedelec 1st kind H(curl)
            Nedelec 2nd kind H(curl)
            Quadrature
            Boundary Quadrature
        """

        dim2domain = {1: "interval", 2: "triangle", 3: "tetrahedron"}

        # Check arguments
        dim = mesh.topology().dim()
        assert(dim in dim2domain, "Invalid mesh dimension: " + str(dim))

        # Create element
        domain = dim2domain[mesh.topology().dim()]
        element = ffc.FiniteElement(family, domain, degree)

        # Initialize base class
        FunctionSpaceBase.__init__(self, mesh, element)

class MixedFunctionSpace(FunctionSpaceBase):
    "MixedFunctionSpace represents a mixed finite element function space."

    def __init__(self, spaces):
        """Create mixed finite element function space. The function space
        may be created by
        
            V = MixedFunctionSpace(spaces)

        where spaces is a list (or tuple) of function spaces.
        """

        # Check arguments
        assert(len(spaces) > 0, "Mixed function space needs at least one subspace.")        
        assert(all(isinstance(V, FunctionSpaceBase) for V in spaces), "Invalid subspaces: " + str(spaces))
        assert(all([V.mesh() == spaces[0].mesh() for V in spaces]), "Nonmatching meshes for mixed function space.")
        
        # Create element
        element = ffc.MixedElement([V.element() for V in spaces()])

        # Initialize base class
        FunctionSpaceBase.__init__(self, spaces[0].mesh, element)

class VectorFunctionSpace(MixedFunctionSpace):
    "VectorFunctionSpace represents a vector-valued finite element function space."

    def __init__(self, mesh, family, degree, dim=None):
        """Create vector-valued finite element function space. The function space
        may be created by
        
            V = VectorFunctionSpace(mesh, family, domain, degree, dim=None)

            mesh    : a Mesh
            family  : a string specifying the element family
            degree  : the degree of the element
            dim     : an optional argument specifying the number of components

        If the dim argument is not provided, the dimension will be deduced from
        the dimension of the mesh.
        """

        # Create subspaces
        dim = dim or mesh.topology().dim()        
        spaces = dim*[FunctionSpace(mesh, family, degree)]

        # Initialize base class
        MixedFunctionSpace.__init__(self, spaces)
