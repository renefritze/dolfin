__author__ = "Johan Hake (hake@simula.no)"
__date__ = "2008-11-03 -- 2008-11-19"
__copyright__ = "Copyright (C) 2008 Johan Hake"
__license__  = "GNU LGPL Version 2.1"

# Modified by Anders Logg, 2008.

__all__ = ["FunctionSpace"]

import ffc
import dolfin

class FunctionSpace(dolfin.cpp_FunctionSpace):
    """FunctionSpace represents a finite element function space.

    A FunctionSpace is defined by a mesh, a finite element, and a
    local-to-global mapping of the degrees of freedom (dofmap).
    """

    def __init__(self, mesh, element):
        """Create FunctionSpace
        
        mesh    : An instance of a DOLFIN Mesh
        element : A FiniteElement
        """

        assert(isinstance(mesh, dolfin.Mesh), "Invalid mesh type.")
        assert(isinstance(element, (ffc.FiniteElementBase)), "Invalid element type.")

        # Create element (FIXME: handle arguments here)
        self.__ffc_element = element
        
        # JIT-compile element to get ufc_element and ufc_dofmap
        self.__ufc_element, self.__ufc_dofmap = ffc.jit(element)

        # Instantiate DOLFIN FiniteElement and DofMap 
        self.__dolfin_element = dolfin.FiniteElement(self.__ufc_element)
        self.__dolfin_dofmap  = dolfin.DofMap(self.__ufc_dofmap, mesh)
        
        # Initialize the cpp_FunctionSpace
        dolfin.cpp_FunctionSpace.__init__(self, mesh,
                                          self.__dolfin_element,
                                          self.__dolfin_dofmap)
        
    def ffc_element(self):
        " Return the form compiler element"
        return self.__ffc_element
    
    def __str__(self):
        return "%s function space" % self._ffc_element.__class__.__name__
