"This module provides plotting functionality (wrapper for Viper)."

__author__ = "Joachim B. Haga <jobh@broadpark.no>"
__date__ = "2008-03-05 -- 2008-12-28"
__copyright__ = "Copyright (C) 2008 Joachim B. Haga"
__license__  = "GNU LGPL Version 2.1"

# Modified by Martin Sandve Alnaes, 2008.
# Modified by Anders Logg, 2008.

import cpp
import os

__all__ = ['Viper', 'plot', 'update', 'interactive', 'save_plot', 'figure']

n = 0

# Fallback for when plotting should be ignored
class IgnorePlot:
    def __init__(self, *args, **kwargs):
        self.ren = self
        print "Ignoring plot. Unset DOLFIN_NOPLOT to enable plotting."
        pass
    def add_polygon(self, *args, **kwargs):
        pass
    def ResetCamera(self, *args, **kwargs):
        pass

# Fallback for when plotting should be replaced by saving to file
#class SavePlot(IgnorePlot):
#    def __init__(self, object, *args, **kwargs):
#        IgnorePlot.__init__(self)
#        global n
#        file = cpp.File('plot-output-%d.pvd' % n)
#        file << object
#        n += 1

# Fallback for when plotting is not available
class NoPlot:
    def __init__(self, *args, **kwargs):
        raise RuntimeError, "Unable to plot: Viper plotter not available."

# Intelligent plot command that handles projections
def dolfin_plot(object, *args, **kwargs):
    "Plot given object (Mesh, MeshFunction or Function)"

    from viper.viper_dolfin import plot as viper_plot

    # Plot mesh
    if isinstance(object, cpp.Mesh):
        return viper_plot(object, *args, **kwargs)

    # Plot mesh function
    if isinstance(object, cpp.MeshFunctionUInt) or \
       isinstance(object, cpp.MeshFunctionInt)  or \
       isinstance(object, cpp.MeshFunctionReal):
        return viper_plot(object, *args, **kwargs)

    # Plot function
    if isinstance(object, cpp.Function):
        return viper_plot(object, *args, **kwargs)

    # Try projecting function
    from project import project
    try:
        print "Object cannot be plotted directly, projecting to piecewise linears."
        u = project(object)
        return plot(u, *args, **kwargs)
    except:
        raise RuntimeError, ("Don't know how to plot given object and projection failed: " + str(object))

if os.environ.has_key('DOLFIN_NOPLOT'):

    # Ignore all plot calls
    for x in __all__:
        exec('%s = IgnorePlot' % x)

    # Override main plot call to save plot data
    #plot = SavePlot

else:

    # Try importing plot calls from viper
    try:
        for x in __all__:
            exec ('from viper.viper_dolfin import %s' % x)
        plot = dolfin_plot

    # Plot calls not found
    except:
        for x in __all__:
            exec('%s = NoPlot' % x)
