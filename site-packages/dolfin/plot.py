"This module provides plotting functionality (wrapper for Viper)."

__author__ = "Joachim B. Haga <jobh@broadpark.no>"
__date__ = "2008-03-05 -- 2008-12-28"
__copyright__ = "Copyright (C) 2008 Joachim B. Haga"
__license__  = "GNU LGPL Version 2.1"

# Modified by Martin Sandve Alnaes, 2008.
# Modified by Anders Logg, 2008.

import os

__all__ = ['Viper', 'plot', 'update', 'interactive', 'save_plot', 'figure']

n = 0

# Fallback for when plotting should be ignored
class IgnorePlot:
    def __init__(self, *args, **kwargs):
        self.ren = self
        pass
    def add_polygon(self, *args, **kwargs):
        pass
    def ResetCamera(self, *args, **kwargs):
        pass

# Fallback for when plotting should be replaced by saving to file
class SavePlot(IgnorePlot):
    def __init__(self, data, *args, **kwargs):
        IgnorePlot.__init__(self)
        from cpp import File
        global n
        file = File('plot-output-%d.pvd' % n)
        file << data
        n += 1

# Fallback for when plotting is not available
class NoPlot:
    def __init__(self, *args, **kwargs):
        raise RuntimeError, "Unable to plot (Viper plotter not available)."

if os.environ.has_key('DOLFIN_NOPLOT'):

    # Ignore all plot calls
    for x in __all__:
        exec('%s = IgnorePlot' % x)

    # Override main plot call to save plot data
    plot = SavePlot

else:

    # Try importing plot calls from viper
    try:
        for x in __all__:
            exec ('from viper.viper_dolfin import %s' % x)

    # Plot calls not found
    except:
        for x in __all__:
            exec('%s = NoPlot' % x)
