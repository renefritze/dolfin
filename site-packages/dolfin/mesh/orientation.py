"""This module provides a simple utility functions. It should be moved
to c++ and wrapped."""

# Copyright (C) 2012 Marie E. Rognes
#
# This file is part of DOLFIN.
#
# DOLFIN is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DOLFIN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with DOLFIN. If not, see <http://www.gnu.org/licenses/>.
#
# First added:  2012-12-11
# Last changed: 2012-12-11

__all__ = ["init_orientation"]

from dolfin import cells, vertices
import numpy

def init_orientation(mesh, global_normal):
    "Initialize cell_orientation."
    assert (mesh.topology().dim() == 2), "Orientation only applicable for 2D meshes embedded in nD"
    mf = mesh.data().create_mesh_function("cell_orientation", 2)
    coords = mesh.coordinates()
    for cell in cells(mesh):
        ind = [v.index() for v in vertices(cell)]
        v1 = coords[ind[1], :] - coords[ind[0], :]
        v2 = coords[ind[2], :] - coords[ind[0], :]
        local_normal = numpy.cross(v1, v2)
        p = cell.midpoint()
        orientation = numpy.inner(global_normal(p), local_normal)
        if orientation > 0:
            mf[cell.index()] = 2
        elif orientation < 0:
            mf[cell.index()] = 1
        else:
            raise Exception, "Not expecting orthogonal local/global normal"

