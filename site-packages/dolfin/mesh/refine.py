"This module provides uniform and local mesh refinement."

__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2010-02-26"
__copyright__ = "Copyright (C) 2009 Anders Logg"
__license__  = "GNU LGPL Version 2.1"

__all__ = ["refine"]

# Import C++ interface
import dolfin.cpp as cpp

def refine(mesh, cell_markers=None):
    """Refine given mesh and return the refined mesh. An optional
    argument (a boolean MeshFunction over cells) may be given to
    specify which cells should be refined. If no cell markers are
    given, then the mesh is refined uniformly."""

    # This function is necessary to return a shared_ptr in place of
    # the reference returned by the C++ refine function. Perhaps this
    # should be handled in the SWIG layer.

    # Refine mesh
    if cell_markers is None:
        cpp._refine(mesh)
    else:
        cpp._refine(mesh, cell_markers)

    # Return child
    return mesh.child()
