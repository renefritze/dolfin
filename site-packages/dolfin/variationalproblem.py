"""This module provides the class VariationalProblem in Python. This
needs special handling and we cannot use the SWIG wrapper directly
since we need to call the JIT compiler."""

__author__ = "Anders Logg (logg@simula.no)"
__date__ = "2007-08-15 -- 2008-12-27"
__copyright__ = "Copyright (C) 2007-2008 Anders Logg"
__license__  = "GNU LGPL Version 2.1"

__all__ = ["VariationalProblem"]

# Import SWIG-generated extension module (DOLFIN C++)
import cpp

# Local imports
from form import *
from function import *

class VariationalProblem(cpp.VariationalProblem):

    # Reuse docstring from cpp.VariationalProblem
    __doc__ = cpp.VariationalProblem.__doc__

    def __init__(self, a, L, bcs=[], nonlinear=False):
        "Define a variational problem."

        # Wrap forms
        self.a = Form(a)
        self.L = Form(L)

        # Handle boundary condition argument
        if not isinstance(bcs, (list, tuple)):
            bcs = [bcs]
        self.bcs = cpp.STLVectorBoundaryConditionPtr()
        for bc in bcs:
            self.bcs.push_back(bc)

        # Initialize base class
        cpp.VariationalProblem.__init__(self, self.a, self.L, self.bcs, nonlinear)

    def solve(self, u=None):
        "Solve variational problem and return solution."

        # Extract trial space and create function for solution
        if u is None:
            if not len(self.a.function_spaces) == 2:
                dolfin.error("Unable to extract trial space for solution of variational problem, is 'a' bilinear?")
                V = self.a.function_spaces[1]
            u = Function(V)

        # Solve
        cpp.VariationalProblem.solve(self, u)

        # Return solution
        return u
