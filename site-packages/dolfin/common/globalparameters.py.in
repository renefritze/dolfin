"""This module defines Python-specific global parameters for DOLFIN by
adding to the global parameter set defined in C++."""

# Copyright (C) 2009-2010 Anders Logg
#
# This file is part of DOLFIN.
#
# DOLFIN is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DOLFIN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with DOLFIN.  If not, see <http://www.gnu.org/licenses/>.
#
# First added:  2009-09-21
# Last changed: 2011-03-14

__all__ = ["parameters"]

import ufl
from dolfin.cpp import parameters, Parameters, MPI

# Set default form compiler
form_compiler_name = "ffc"

# Import form compiler
try:
    form_compiler = __import__(form_compiler_name)
except ImportError, message:
    print message
    raise RuntimeError, "Could not import %s form compiler." % form_compiler_name

# Initialize form compiler parameters
form_compiler_parameters = Parameters("form_compiler")
for key, value in form_compiler.default_parameters().iteritems():
    if key in ["swig_binary", "swig_path"]:
        continue
    form_compiler_parameters.add(key, value)
form_compiler_parameters.add("name", form_compiler_name)

# Set default swig path and binary parameters
parameters.add("swig_binary", "@SWIG_BINARY@")
parameters.add("swig_path", "")

# Increase log level for form compiler to hide output
form_compiler_parameters["log_level"] = ufl.INFO + 5

# Set prefix when running in parallel
if MPI.num_processes() > 1:
    form_compiler_parameters["log_prefix"] = "Process %d: " % MPI.process_number()

# Add form compiler parameters to global parameter set
parameters.add(form_compiler_parameters)
