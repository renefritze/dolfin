"""This module defines Python-specific global parameters for DOLFIN by
adding to the global parameter set defined in C++."""

# Copyright (C) 2009-2016 Anders Logg
#
# This file is part of DOLFIN.
#
# DOLFIN is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DOLFIN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with DOLFIN. If not, see <http://www.gnu.org/licenses/>.

__all__ = ["parameters", "ffc_default_parameters"]

from ffc import default_jit_parameters

import six

from dolfin.cpp import parameters, Parameters


def ffc_default_parameters():
    """Get default parameters of FFC"""
    # Get dict with defaults
    d = default_jit_parameters()

    # Initialize parameters omitting None values
    p = Parameters("form_compiler",
                   **{k: v for k, v in six.iteritems(d) if v is not None})

    typemap = {
        "quadrature_rule": "",
        "quadrature_degree": 0,
        "precision": 0,
    }

    # Add the rest
    for k, v in six.iteritems(d):
        if v is None:
            p.add(k, typemap[k])
            p[k] = None  # Reset to None

    return p


# Add form compiler parameters to global parameter set
if not parameters.has_parameter_set("form_compiler"):
    parameters.add(ffc_default_parameters())
