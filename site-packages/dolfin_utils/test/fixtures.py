"""Shared fixtures for unit tests involving dolfin."""

# Copyright (C) 2014-2014 Martin Sandve Alnaes
#
# This file is part of DOLFIN.
#
# DOLFIN is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DOLFIN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with DOLFIN. If not, see <http://www.gnu.org/licenses/>.

import pytest
import os
import tempfile
from dolfin import  *

# --- Test fixtures (use as is or as examples): ---

@pytest.fixture(params=[False, True])
def true_false_fixture(request):
    "A fixture setting the values true and false."
    return request.param

@pytest.yield_fixture(scope="function")
def cleandir():
    "Creates and changes to a clean temporary directory, resets cwd afterwards."
    oldpath = os.getcwd()
    newpath = tempfile.mkdtemp()
    os.chdir(newpath)
    yield newpath
    os.chdir(oldpath)

@pytest.yield_fixture(scope="function")
def temppath(filedir, request):
    "Creates a directory named after the test function + _output, and resets cwd afterwards."
    basename = os.path.basename(request.module.__file__)
    outputname = basename.replace(".py", "_output")
    temppath = os.path.join(filedir, outputname)
    if not os.path.exists(temppath):
        os.mkdir(temppath)
    return temppath

@pytest.fixture(scope="module")
def filedir(request):
    "Return the directory of the test module."
    return os.path.dirname(os.path.abspath(request.module.__file__))

def set_parameters_fixture(paramname, values, key=lambda x: x):
    """Return a fixture that sets and resets a global parameter
    to each of a list of values before and after each test run.

    Usage:
        my_fixture1 = set_parameters_fixture("linear_algebra_backend", ["PETSc", "STL"])
        my_fixture2 = set_parameters_fixture("linear_algebra_backend", [("uBLAS", "Sparse"), ("STL", "")], key=lambda x: x[0])

        def test_something1(my_fixture1):
            assert my_fixture1 in ("PETSc", "STL")
            assert parameters.linear_algebra_backend == my_fixture1

        def test_something2(my_fixture2):
            assert my_fixture2[0] in ("uBLAS", "STL")
            assert parameters.linear_algebra_backend == my_fixture2[0]

    Try it and see.
    """
    def _pushpop(request):
        #TODO: This should be done more robust and
        #      assumes that parameters[][][] is not used.
        #TODO: Check if the backend exists?
        if '.' in paramname:
            first, second = paramname.split('.')
            prev = parameters[first][second]
            yield request.param
            parameters[first][second] = prev
        else:
            prev = parameters[paramname]               # Remember original value
            parameters[paramname] = key(request.param) # Set value
            yield request.param                        # Let test run
            parameters[paramname] = prev               # Reset value

    return pytest.yield_fixture(scope="function", params=values)(_pushpop)
