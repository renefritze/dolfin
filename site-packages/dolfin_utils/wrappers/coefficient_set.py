#!/usr/bin/env python
"Template for generating a CoefficientSet class. Not yet functional."

__author__ = "Martin Alnes (martinal@simula.no)"
__date__ = "2009-03-16 -- 2009-03-16"
__copyright__ = "Copyright (C) 2009 Martin Alnes"
__license__  = "GNU GPL version 3 or any later version"

# Template code for coefficient class
coefficient_template = """class %(classname)s
{
public:
  %(classname)s()
  {}
  
  ~%(classname)s()
  {}

  dolfin::uint num_coefficients() const
  {
    return %(num_coefficients)d;
  }

  std::string name(dolfin::uint i) const
  {
    switch(i)
    {
%(name_cases)s
    default:
        throw std::runtime_error("Invalid coefficient number.");
    }
  }

  void disp() const
  {
    for(dolfin::uint i=0; i<num_coefficients(); ++i)
    {
        dolfin::cout << "Coefficient " << i << ": \\t" << name(i) << dolfin::endl;
    }
  }

%(body)s
};"""

def generate_coefficient_set_class(classname, coefficient_names):
    num_coefficients = len(coefficient_names)
    name_cases = "\n".join('    case %d: return "%s";' % (i, n) for (i, n) in enumerate(coefficient_names))
    body = "\n".join('  Coefficient_%s %s;' % (n, n) for n in coefficient_names)
    
    args = { "classname": classname,
             "num_coefficients": num_coefficients,
             "name_cases": name_cases,
             "body": body }
    return coefficient_template % args 

if __name__ == "__main__":
    classname = "MyCoefficientSet"
    coefficient_names = ["f", "g"]
    print generate_coefficient_set_class(classname, coefficient_names)
    print 
    print "FIXME: This doesn't work since the Coefficient_foo classes are"
    print "       connected to a form. Need something similar to Coefficient"
    print "       that only checks the function space and stores a pointer"
    print "       to the function."
    print 
