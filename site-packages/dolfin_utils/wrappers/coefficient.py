#!/usr/bin/env python
"Template for generating dolfin::Coefficient subclass."

__author__ = "Anders Logg (logg@simula.no) and Martin Alnes (martinal@simula.no)"
__date__ = "2008-11-06 -- 2008-12-15"
__copyright__ = "Copyright (C) 2008 Anders Logg"
__license__  = "GNU GPL version 3 or any later version"

# Template code for coefficient class
coefficient_template = """class %(classname)s: public dolfin::Coefficient
{
public:

  %(classname)s(dolfin::Form & form):
    dolfin::Coefficient(form)
  {}
  
  ~%(classname)s()
  {}

  const %(classname)s& operator=(dolfin::Function & f)
  {
    attach(f);
    return *this;
  }
  
  const %(classname)s& operator=(boost::shared_ptr<dolfin::Function> f)
  {
    attach(f);
    return *this;
  }
  
  const dolfin::FunctionSpace * create_function_space() const
  {
    return new %(functionspacename)s(form.mesh());
  }
  
  dolfin::uint number() const
  {
    return %(number)d;
  }

  std::string name() const
  {
    return "%(name)s";
  }

};"""

def generate_coefficient_class(classname, functionspace_classname, number, name):
    args = {"classname": classname,
            "functionspacename": functionspace_classname,
            "number": number,
            "name": name}
    return coefficient_template % args 

if __name__ == "__main__":
    classname = "MyCoefficient"
    functionspace_classname = "MyFunctionSpace"
    number = 123
    name = "mycoefficient"
    print generate_coefficient_class(classname, functionspace_classname, number, name)

