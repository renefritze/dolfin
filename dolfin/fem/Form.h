// Copyright (C) 2007-2008 Anders Logg.
// Licensed under the GNU LGPL Version 2.1.
//
// Modified by Garth N. Wells, 2008.
//
// First added:  2007-04-02
// Last changed: 2008-10-23

#ifndef __FORM_H
#define __FORM_H

#include <vector>
#include <tr1/memory>
#include <dolfin/common/NoDeleter.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/function/FunctionSpace.h>
#include "DofMapSet.h"

// Forward declaration
namespace ufc 
{
  class form; 
}

namespace dolfin
{

  // Forward declarations
  class Function;
  template<class T> class MeshFunction;

  /// Base class for UFC code generated by FFC for DOLFIN with option -l

  class Form
  {
  public:

    /// Create form for given function spaces
    Form(std::vector<FunctionSpace&>& V) : function_spaces(0)
    {
      // Add function spaces
      for (uint i = 0; i < V.size(); ++i)
      {
        std::tr1::shared_ptr<FunctionSpace> Vi(&V[i], NoDeleter<FunctionSpace>());
        function_spaces.push_back(Vi);
      }

      // Check that function spaces match the form
      check();
    }

    /// Create form for given function spaces (shared data)
    Form(std::vector<std::tr1::shared_ptr<FunctionSpace> >& V) : function_spaces(V)
    {
      // Add function spaces
      for (uint i = 0; i < V.size(); ++i)
        function_spaces.push_back(V[i]);

      // Check that function spaces match the form
      check();
    }

    /// Destructor
    virtual ~Form();

    /// Return UFC form
    virtual const ufc::form& form() const = 0;

    /// Return function space for given argument
    const FunctionSpace& function_space(uint i) const
    { return *(function_spaces[i]); }

    /// Return array of coefficients
    virtual const Array<Function*>& coefficients() const = 0;

    /// Create degree of freedom maps 
    void updateDofMaps(Mesh& mesh);

    /// Create finite elements 
    void updateFiniteElements();

    /// Create degree of freedom maps
    void updateDofMaps(Mesh& mesh, MeshFunction<uint>& partitions);

    /// Set degree of freedom maps (not owned)
    void setDofMaps(DofMapSet& dof_map_set);

    /// Return DofMapSet
    DofMapSet& dofMaps() const;

    /// Return FiniteElement
    FiniteElement& finite_element(uint i);

  private:

    // Check that function spaces match the form
    void check() const;

    // Shared pointers to function spaces, one for each argument
    std::vector< std::tr1::shared_ptr<FunctionSpace> > function_spaces;

    // FIXME: Remove
    // Finite elements
    std::vector<FiniteElement*> finite_elements;
    
    // FIXME: Remove
    // Degree of freedom maps
    std::tr1::shared_ptr<DofMapSet> dof_map_set;

  };

}

#endif
