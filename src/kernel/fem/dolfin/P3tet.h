// Automatically generated by FFC, the FEniCS Form Compiler, version 0.3.5.
// For further information, go to http://www/fenics.org/ffc/.
// Licensed under the GNU GPL Version 2.

#ifndef __P3TET_H
#define __P3TET_H

#include <dolfin/Mesh.h>
#include <dolfin/Cell.h>
#include <dolfin/Point.h>
#include <dolfin/AffineMap.h>
#include <dolfin/FiniteElement.h>
#include <dolfin/FiniteElementSpec.h>

namespace dolfin
{

class P3tet : public dolfin::FiniteElement
{
public:

  P3tet() : dolfin::FiniteElement(), tensordims(0), subelements(0)
  {
    // Element is scalar, don't need to initialize tensordims

    // Element is simple, don't need to initialize subelements
  }

  ~P3tet()
  {
    if ( tensordims ) delete [] tensordims;
    if ( subelements )
    {
      for (unsigned int i = 0; i < elementdim(); i++)
        delete subelements[i];
      delete [] subelements;
    }
  }

  inline unsigned int spacedim() const
  {
    return 20;
  }

  inline unsigned int shapedim() const
  {
    return 3;
  }

  inline unsigned int tensordim(unsigned int i) const
  {
    dolfin_error("Element is scalar.");
    return 0;
  }

  inline unsigned int elementdim() const
  {
    return 1;
  }

  inline unsigned int rank() const
  {
    return 0;
  }

  void nodemap(int nodes[], const Cell& cell, const Mesh& mesh) const
  {
    static unsigned int edge_reordering_0[2][2] = {{0, 1}, {1, 0}};
    nodes[0] = cell.entities(0)[0];
    nodes[1] = cell.entities(0)[1];
    nodes[2] = cell.entities(0)[2];
    nodes[3] = cell.entities(0)[3];
    int alignment = cell.alignment(1, 0);
    int offset = mesh.topology().size(0);
    nodes[4] = offset + 2*cell.entities(1)[0] + edge_reordering_0[alignment][0];
    nodes[5] = offset + 2*cell.entities(1)[0] + edge_reordering_0[alignment][1];
    alignment = cell.alignment(1, 1);
    nodes[6] = offset + 2*cell.entities(1)[1] + edge_reordering_0[alignment][0];
    nodes[7] = offset + 2*cell.entities(1)[1] + edge_reordering_0[alignment][1];
    alignment = cell.alignment(1, 2);
    nodes[8] = offset + 2*cell.entities(1)[2] + edge_reordering_0[alignment][0];
    nodes[9] = offset + 2*cell.entities(1)[2] + edge_reordering_0[alignment][1];
    alignment = cell.alignment(1, 3);
    nodes[10] = offset + 2*cell.entities(1)[3] + edge_reordering_0[alignment][0];
    nodes[11] = offset + 2*cell.entities(1)[3] + edge_reordering_0[alignment][1];
    alignment = cell.alignment(1, 4);
    nodes[12] = offset + 2*cell.entities(1)[4] + edge_reordering_0[alignment][0];
    nodes[13] = offset + 2*cell.entities(1)[4] + edge_reordering_0[alignment][1];
    alignment = cell.alignment(1, 5);
    nodes[14] = offset + 2*cell.entities(1)[5] + edge_reordering_0[alignment][0];
    nodes[15] = offset + 2*cell.entities(1)[5] + edge_reordering_0[alignment][1];
    offset = offset + 2*mesh.topology().size(1);
    nodes[16] = offset + cell.entities(2)[0];
    nodes[17] = offset + cell.entities(2)[1];
    nodes[18] = offset + cell.entities(2)[2];
    nodes[19] = offset + cell.entities(2)[3];
  }

  void pointmap(Point points[], unsigned int components[], const AffineMap& map) const
  {
    points[0] = map(0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[1] = map(1.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00);
    points[2] = map(0.000000000000000e+00, 1.000000000000000e+00, 0.000000000000000e+00);
    points[3] = map(0.000000000000000e+00, 0.000000000000000e+00, 1.000000000000000e+00);
    points[4] = map(6.666666666666667e-01, 3.333333333333333e-01, 0.000000000000000e+00);
    points[5] = map(3.333333333333334e-01, 6.666666666666666e-01, 0.000000000000000e+00);
    points[6] = map(0.000000000000000e+00, 6.666666666666667e-01, 0.000000000000000e+00);
    points[7] = map(0.000000000000000e+00, 3.333333333333334e-01, 0.000000000000000e+00);
    points[8] = map(3.333333333333333e-01, 0.000000000000000e+00, 0.000000000000000e+00);
    points[9] = map(6.666666666666666e-01, 0.000000000000000e+00, 0.000000000000000e+00);
    points[10] = map(0.000000000000000e+00, 0.000000000000000e+00, 3.333333333333333e-01);
    points[11] = map(0.000000000000000e+00, 0.000000000000000e+00, 6.666666666666666e-01);
    points[12] = map(6.666666666666667e-01, 0.000000000000000e+00, 3.333333333333333e-01);
    points[13] = map(3.333333333333334e-01, 0.000000000000000e+00, 6.666666666666666e-01);
    points[14] = map(0.000000000000000e+00, 6.666666666666667e-01, 3.333333333333333e-01);
    points[15] = map(0.000000000000000e+00, 3.333333333333334e-01, 6.666666666666666e-01);
    points[16] = map(3.333333333333334e-01, 3.333333333333333e-01, 3.333333333333333e-01);
    points[17] = map(0.000000000000000e+00, 3.333333333333334e-01, 3.333333333333333e-01);
    points[18] = map(3.333333333333333e-01, 0.000000000000000e+00, 3.333333333333334e-01);
    points[19] = map(3.333333333333333e-01, 3.333333333333333e-01, 0.000000000000000e+00);
    components[0] = 0;
    components[1] = 0;
    components[2] = 0;
    components[3] = 0;
    components[4] = 0;
    components[5] = 0;
    components[6] = 0;
    components[7] = 0;
    components[8] = 0;
    components[9] = 0;
    components[10] = 0;
    components[11] = 0;
    components[12] = 0;
    components[13] = 0;
    components[14] = 0;
    components[15] = 0;
    components[16] = 0;
    components[17] = 0;
    components[18] = 0;
    components[19] = 0;
  }

  void vertexeval(uint vertex_nodes[], unsigned int vertex, const Mesh& mesh) const
  {
    // FIXME: Temporary fix for Lagrange elements
    vertex_nodes[0] = vertex;
  }

  const FiniteElement& operator[] (unsigned int i) const
  {
    return *this;
  }

  FiniteElement& operator[] (unsigned int i)
  {
    return *this;
  }

  FiniteElementSpec spec() const
  {
    FiniteElementSpec s("Lagrange", "tetrahedron", 3);
    return s;
  }
  
private:

  unsigned int* tensordims;
  FiniteElement** subelements;

};

}

#endif
