#!/usr/bin/env python

__author__ = "Johan Hake"

import os

class DocstringGenerator:
    def __init__(self, directory = os.curdir, header_files = "Use files in working directory", swig_directory = "swig",
                 docstring_file_base = "Use working directory", doxygen_file = "doxyfile", xml_directory  = "xml"):
        """
        A class to generate docstrings from c/c++ header files, using doxygen.

        Provide a directory that is scanned for header files or provide the header files directly
        as list of strings.
        """
        # Set the name of the working directory
        if not os.path.isabs(directory):
            if directory == os.curdir:
                directory = os.path.abspath(os.curdir)
            else:
                directory = os.path.join(os.path.abspath(os.curdir),directory)
        self._directory = directory

        # Set the name of the header files, if not provided scan the working directory
        if header_files == "Use files in working directory":
            self._header_files = [ f for f in os.listdir(self._directory) if f.rfind(".h") != -1]
        else:
            self._header_files = header_files
            
        # Set the name of the directory where the generated interface file(s) are placed
        if os.path.isabs(swig_directory):
            self._swig_directory = swig_directory
        else:
            self._swig_directory = os.path.join(directory,swig_directory)

        # Set the name of the temporary doxyfile
        self._doxygen_file = os.path.join(directory, doxygen_file)

        # Set the name of the xml directory
        if os.path.isabs(xml_directory):
            self._xml_directory = xml_directory
        else:
            self._xml_directory = os.path.join(directory,xml_directory)

        # Set the name of the generated docstring file that should be %included in a swig
        # interface file before any %include "code" statements
        # The files name is: docstring_file_base + _docstrings.i
        if docstring_file_base == "Use working directory":
            # If the not provided then use current directory
            docstring_file_base = self._directory.split(os.path.sep)[-1]
        self._docstring_file = os.path.join(self._swig_directory,docstring_file_base + "_docstrings.i")
            
    def generate_doxygen_documentation(self):
        """
        Generate xml documentation with doxygen.
        Doxygen needs to be installed in /usr/bin/.
        """ 
        from subprocess import Popen
        header_files = " ".join(self._header_files)
        dfile = open(self._doxygen_file,'w')
        dfile.write("""INPUT  = %s
GENERATE_HTML          = NO
GENERATE_LATEX         = NO
GENERATE_XML           = YES
XML_OUTPUT             = %s""" % (header_files,self._xml_directory))
        dfile.close()
        generate_doxygen_code = Popen(['doxygen',dfile.name])
        generate_doxygen_code.wait()
    
    def generate_interface_files_from_classes(self):
        """Only include class files when generating interface files"""
        from  doxy2swig import Doxy2SWIG
        class_files = [f for f in os.listdir(self._xml_directory) if f.find("class") != -1]
        dfile = open(self._docstring_file,"w")
        dfile.write("// An autogenerated docstringfile\n\n")
        dfile.close()
        for class_file in class_files:
            p = Doxy2SWIG(os.path.join(self._xml_directory,class_file))
            p.generate()
            dfile = open(self._docstring_file,"a")
            p.write(dfile)

    def generate_interface_file_from_index(self):
        """Take index.xml and generates one interface file."""
        from  doxy2swig import Doxy2SWIG
        p = Doxy2SWIG(os.path.join(self._xml_directory,"index.xml"))
        p.generate()
        dfile = open(self._docstring_file,"w")
        dfile.write("// An autogenerated docstringfile\n\n")
        #p.write(self._docstring_file)
        p.write(dfile)
    
    def clean(self):
        """Remove temporary xml directory and doxyfile."""
        for f in os.listdir(self._xml_directory):
            os.remove(os.path.join(self._xml_directory,f))
        os.removedirs(self._xml_directory)
        os.remove(self._doxygen_file)
        if 'html' in os.listdir(self._directory):
            html_dir = os.path.join(self._directory,"html")
            for f in os.listdir(html_dir):
                os.remove(os.path.join(html_dir,f))
            os.removedirs(html_dir)
            
if __name__ == '__main__':
    import sys
    if len(sys.argv) == 2:
        directory = sys.argv[1]
        g =  DocstringGenerator(directory)
    else:
        g = DocstringGenerator()
    g.generate_doxygen_documentation()
    #if "index.xml" in os.listdir(g._xml_directory):
    #    g.generate_interface_file_from_index()
    #else:
    g.generate_interface_files()
    g.clean()
