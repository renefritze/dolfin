# Form representing the equilibrium equation in elastoplasticity

name = "ElasticityDirect"
element1 = FiniteElement("Vector Lagrange", "tetrahedron", 1)
element2 = FiniteElement("Discontinuous vector Lagrange",
                         "tetrahedron", 0, 9)
element3 = FiniteElement("Lagrange", "tetrahedron", 1)

u = BasisFunction(element1)
v = BasisFunction(element1)
B = Function(element2)
vel = Function(element1)

lmbda   = Function(element3) # Lame coefficient
mu      = Function(element3) # Lame coefficient
nuv     = Function(element3) # viscosity coefficient
rho	= Function(element3) # density coefficient

# Dimension
d = len(v)

def tomatrix(q):
    return [ [q[3 * j + i] for i in range(3)]
             for j in range(3) ]

def epsilon(u):
    return 0.5 * (grad(u) + transp(grad(u)))

def E(e, lmbda, mu):
#    Ee = 2.0 * mult(mu, e) + \
#         mult(lmbda, mult(trace(e), Identity(d)))
    Ee = mult(mu, e)
    return Ee

Bmatrix = tomatrix(B)
ematrix = 0.5 * (Identity(d) - Bmatrix)
sigmamatrix = E(ematrix, lmbda, mu)

Lelast = -dot(sigmamatrix, grad(v))
Lvisc = -nuv * dot(epsilon(vel), grad(v))

L = (Lelast + Lvisc) * dx
a = (rho * dot(u, v)) * dx
