# Copyright (C) 2006-2007 Garth N Wells.
# Licensed under the GNU LGPL Version 2.1.
#
# First added:  2006
# Last changed: 2007-05-01
#
# The linearised bilinear form a(v, U) and linear form L(v) for
# the Cahn-Hilliard equation.
#
# Compile this form with FFC: ffc CahnHilliard.form.

P1 = FiniteElement("Lagrange", "triangle", 1)
P2 = FiniteElement("Lagrange", "triangle", 1)
ME = P1 + P2

(v,  q)  = TestFunctions(ME)
(dk, dc) = TrialFunctions(ME)   # potential, concentration 

(k1, c1) = Functions(ME)        # current solution 
(k0, c0) = Functions(ME)        # solution from previous converged step 

lmbda    = Constant("triangle") # surface parameter
muFactor = Constant("triangle") # chemical free energy multiplier

dt       = Constant("triangle") # time step
theta    = Constant("triangle") # time stepping parameter 

# Chemical free-energy \phi = c^2*(1-c^2)

# mu = \phi,c
def mu(c, muFactor):
    return muFactor*(2*c*(1-c)*(1-c) - 2*c*c*(1-c))

# DmuDc = \phi,cc
def DmuDc(c, muFactor):
    return muFactor*(2.0*(1.0-c)*(1.0-c) - 8.0*c*(1.0-c) + 2.0*c*c)

# Mobility
Mob = 1.0
dMob = 0.0

# k^(n+theta)
k_mid = (1-theta)*k0 + theta*k1

# \delta k^(n+theta)
dk_mid = theta*dk

a1 = q*dc*dx + dt*Mob*dot(grad(q), grad(dk_mid))*dx
a2 = v*dk*dx - v*DmuDc(c1, muFactor)*dc*dx \
             - lmbda*dot(grad(v), grad(dc))*dx

L1 = q*c1*dx - q*c0*dx + dt*Mob*dot(grad(q), grad(k_mid))*dx
L2 = v*k1*dx - v*mu(c1, muFactor)*dx - lmbda*dot(grad(v), grad(c1))*dx

a =  a1 + a2
L = -L1 - L2 

