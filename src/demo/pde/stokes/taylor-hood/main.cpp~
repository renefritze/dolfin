// Copyright (C) 2006 Anders Logg.
// Licensed under the GNU GPL Version 2.
//
// First added:  2006-02-09
// Last changed: 2006-02-09

#include <dolfin.h>
#include "Stokes.h"

using namespace dolfin;

// Right-hand side
class MyFunction : public Function
{
  real eval(const Point& p, unsigned int i)
  {
    return 0.0;
  }
};

// Boundary condition
class MyBC : public BoundaryCondition
{
  void eval(BoundaryValue& value, const Point& p, unsigned int i)
  {
    // Boundary condition at inflow
    // Width of clamp
    real w = 0.1;

    // Center of rotation
    real y0 = 0.5;
    real z0 = 0.219;

    // Angle of rotation (30 degrees)
    real theta = 0.5236;

    // New coordinates
    real y = y0 + (p.y - y0)*cos(theta) - (p.z - z0)*sin(theta);
    real z = z0 + (p.y - y0)*sin(theta) + (p.z - z0)*cos(theta);
    
    // Clamp at left end
    if ( p.x < w )
      value = 0.0;

    // Clamp at right end
    if ( p.x > (1.0 - w) )
    {
      if ( i == 1 )
	value = y - p.y;
      else if ( i == 2 )
	value = z - p.z;
    }
  }
};

//-----------------------------------------------------------------------------
StokesSolver::StokesSolver(Mesh& mesh, Function& f, BoundaryCondition& bc)
  : Solver(), mesh(mesh), f(f), bc(bc)
{
  // Declare parameters
  add("velocity file name", "velocity.pvd");
  add("pressure file name", "pressure.pvd");
}
//-----------------------------------------------------------------------------

int main()
{
  // Set up problem
  Mesh mesh("dolfin-2.xml.gz");
  MyFunction f;
  MyBC bc;
  Stokes::BilinearForm a;
  Stokes::LinearForm L(f);

  // Assemble linear system
  Matrix A;
  Vector x, b;
  FEM::assemble(a, L, A, b, mesh, bc);

  // Solve the linear system
  GMRES solver;
  solver.solve(A, x, b);

  // Pick the two sub functions of the solution
  
  Function u = w[0];
  Function p = w[1];

  // Save the solutions to file
  u.rename("u", "velocity");
  p.rename("p", "pressure");
  File ufile(get("velocity file name"));
  File pfile(get("pressure file name"));
  ufile << u;
  pfile << p;

  // Temporary for testing
  if ( mesh.type() == Mesh::triangles )
    checkError(mesh, u);

  // Delete forms
  delete a;
  delete L;
}
//-----------------------------------------------------------------------------
void StokesSolver::solve(Mesh& mesh, Function& f, BoundaryCondition& bc)
{
  StokesSolver solver(mesh, f, bc);
  solver.solve();
}
//-----------------------------------------------------------------------------
void StokesSolver::checkError(Mesh& mesh, Function& U)
{
  ExactSolution u;
  L2Error::LinearForm L(U, u);
  Vector b;
  FEM::assemble(L, b, mesh);
  real norm = sqrt(b.sum());

  dolfin_info("L2 error for velocity: %.3e", norm);
}
//-----------------------------------------------------------------------------
