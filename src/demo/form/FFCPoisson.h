// This file was automatically generated by FFC, the FEniCS Form Compiler.
// Licensed under the GNU GPL Version 2.

#ifndef __FFCPOISSON_BILINEAR_H
#define __FFCPOISSON_BILINEAR_H

#include <dolfin/NewFiniteElement.h>
#include <dolfin/BilinearForm.h>

using namespace dolfin;

/// This is the finite element for which the form is generated,
/// providing the information neccessary to do assembly.

class FFCPoissonFiniteElement : public NewFiniteElement
{
public:

  FFCPoissonFiniteElement() : NewFiniteElement() {}

  unsigned int spacedim() const
  {
    return 4;
  }

  unsigned int shapedim() const
  {
    return 3;
  }

  unsigned int vectordim() const
  {
    return 1;
  }

  unsigned int dof(unsigned int i, const Cell& cell) const
  {
    return cell.nodeID(i);
  }

  const Point& coord(unsigned int i, const Cell& cell) const
  {
    return cell.node(i).coord();
  }

};

/// This class contains the form to be evaluated, including
/// contributions from the interior and boundary of the domain.

class FFCPoissonBilinearForm : public BilinearForm
{
public:

  FFCPoissonBilinearForm(const NewFiniteElement& element) : BilinearForm(element) {}

  bool interior(real** A) const
  {
    // Compute geometry tensors
    real G0 = det;

    // Compute element tensor
    A[0][0] = 0.133333333333*G0;
    A[1][0] = 0.0666666666667*G0;
    A[2][0] = 0.0666666666667*G0;
    A[3][0] = 0.0666666666667*G0;
    A[0][1] = 0.0666666666667*G0;
    A[1][1] = 0.133333333333*G0;
    A[2][1] = 0.0666666666667*G0;
    A[3][1] = 0.0666666666667*G0;
    A[0][2] = 0.0666666666667*G0;
    A[1][2] = 0.0666666666667*G0;
    A[2][2] = 0.133333333333*G0;
    A[3][2] = 0.0666666666667*G0;
    A[0][3] = 0.0666666666667*G0;
    A[1][3] = 0.0666666666667*G0;
    A[2][3] = 0.0666666666667*G0;
    A[3][3] = 0.133333333333*G0;

    return true;
  }

};

#endif
