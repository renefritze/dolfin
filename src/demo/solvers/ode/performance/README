The setup of this test is that we have a string of masses connected
with springs. The first mass is connected with a hard spring to a
wall, and oscillates with high frequency and amplitude. The rest of
the masses (the "slow" masses) are connected to each other and to the
first mass with soft springs, optionally also with damping, and will
oscillate slowly and with low amplitude.

N is the total number of masses.
M is the number of timesteps for the first mass per slab.
B is the damping coefficient.

The test is run by:

./run-perf-stiff.sh

At the end of the "run-perf-stiff.sh" file the test can be
customized. The run() function takes M as the first parameter and B as
the second. C1 and C2 are computed by least squares and are stored in
the "timings.m" file as "k_mdg0" and "m_mdg0" (for mdG(0)).


This test measures growth of computation time versus N, M and B. The
nonstiff multi-adaptive algorithm should grow as:

T = C1 * M + C2 * N

A nonstiff mono-adaptive algorithm should grow as:

T = C1 + C2 * M * N

A stiff mono-adaptive algorithm using for example Newton and a Krylow
solver should grow as:

T = C1 + C2 * B^1/2 * M * N

Hopefully, our stiff multi-adaptive algorithm will grow as:

T = C1 * M + C2 * B^1/2 * N
