# Test form for updated elasticity

#from Numeric import *
#from math import *

import Numeric

name = "ElasticityUpdatedSigma"
element1 = FiniteElement("Vector Lagrange", "tetrahedron", 1)
element2 = FiniteElement("Discontinuous vector Lagrange", "tetrahedron", 0, 9)
element3 = FiniteElement("Discontinuous vector Lagrange", "tetrahedron", 0, 1)

lmbda   = Constant() # Lame coefficient
mu      = Constant() # Lame coefficient
nuplast = Constant() # Plastic viscosity

q = BasisFunction(element2)
v = Function(element1)
sigma = Function(element2)
sigmanorm = Function(element3)

# Dimension (FFC should provide this)
d = len(v)

def epsilon(u):
    return 0.5 * (grad(u) + transp(grad(u)))

def epsilonspin(u):
    return 0.5 * (grad(u) - transp(grad(u)))

def E(e, lmbda, mu):
    Ee = 2.0 * mult(mu, e) + mult(lmbda, mult(trace(e), Identity(d)))
    
    return Ee

def tomatrix(q):
    return [ [q[3 * i + j] for i in range(3)] for j in range(3) ]

qmatrix = tomatrix(q)
sigmamatrix = tomatrix(sigma)

W = epsilonspin(v)

Eev = E(epsilon(v), lmbda, mu)

Ljaumann = dot(Numeric.matrixmultiply(W, sigmamatrix) -
	Numeric.matrixmultiply(sigmamatrix, W), qmatrix)

Llie = dot(Numeric.matrixmultiply(grad(v), sigmamatrix) -
	Numeric.matrixmultiply(sigmamatrix, grad(v)), qmatrix)

Lelast = dot(E(epsilon(v), lmbda, mu), qmatrix)
Lplast = dot(E(sigmamatrix, lmbda, mu), qmatrix)

#L = (Lelast + 1.0 * Llie - 0.0 * nuplast * (1 - sigmanorm[0]) * Lplast) * dx
L = (Lelast + 1.0 * Ljaumann - 0.0 * nuplast * (1 - sigmanorm[0]) * Lplast) * dx
