# Test form for updated elasticity

from Numeric import *
from math import *

name = "ElasticityUpdatedSigma"
element1 = FiniteElement("Vector Lagrange", "tetrahedron", 1)
element2 = FiniteElement("Discontinuous vector Lagrange", "tetrahedron", 0, 9)
element3 = FiniteElement("Discontinuous vector Lagrange", "tetrahedron", 0, 1)

lmbda  = Constant() # Lame coefficient
mu     = Constant() # Lame coefficient
nuplast = Constant() # Plastic viscosity

q = BasisFunction(element2)
v = Function(element1)
sigma = Function(element2)
sigmanorm = Function(element3)

global zero
zero = 0.0 * Constant()

def ffczeros(m, n):
    A = array((zero))
    A = resize(A, (m, n))
    A *= 0.0
    
    return A

def ffcidentity(m):
    A = myzeros(m, m)

    for ii in range(m):
        for jj in range(m):
            if ii == jj:
                A[ii, jj] = 1.0
                    
    return A

def epsilon(u):
    eu = ffczeros(3, 3)

    for ii in range(3):
        for jj in range(3):
            eu[ii, jj] = 0.5 * (u[ii].dx(jj) + u[jj].dx(ii))

    return eu


def E(e, lmbda, mu):
    Ee = 2.0 * multiply(mu, e)
    for ii in range(3):
        for jj in range(3):
            if ii == jj:
                Ee[ii, jj] += lmbda * trace(e)

    return Ee



Lelast = vdot(E(epsilon(v), lmbda, mu), sigma)


L = (Lelast - nuplast * (1 - sigmanorm) * Lplast)) * dx
