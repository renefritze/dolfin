# Copyright (C) 2006 Kristian Oelgaard and Garth N. Wells.
# Licensed under the GNU GPL Version 2.
#
# First added:  2006-11-13

elementA 	= FiniteElement("Vector Lagrange", "tetrahedron", 1, 3)
elementT = FiniteElement("Discontinuous vector Lagrange", "tetrahedron", 0, 36)
elementS = FiniteElement("Discontinuous vector Lagrange", "tetrahedron", 0, 6)

v = TestFunction(elementA)
u = TrialFunction(elementA)
b = Function(elementA)
t = Function(elementT)
s = Function(elementS)


def eps(u):	#eps_xx			eps_yy		 eps_zz		    		gam_xy			 					gam_xz								gam_yz
	return [u[0].dx(0), u[1].dx(1), u[2].dx(2), u[0].dx(1) + u[1].dx(0), u[0].dx(2) + u[2].dx(0), u[1].dx(2) + u[2].dx(1)]

def sigma(s):#xx	xy		xz			yx		yy		yz			zx			zy			zz
	return ([s[0], s[3], s[4]], [s[3], s[1], s[5]], [s[4], s[5], s[2]])


def dsigma(u):
  return ([t[0]*eps(u)[0] + t[1]* eps(u)[1] + t[2]* eps(u)[2] + t[3]* eps(u)[3] + t[4]* eps(u)[4] + t[5]* eps(u)[5], \
					t[18]*eps(u)[0] + t[19]*eps(u)[1] + t[20]*eps(u)[2] + t[21]*eps(u)[3] + t[22]*eps(u)[4] + t[23]*eps(u)[5], \
					t[24]*eps(u)[0] + t[25]*eps(u)[1] + t[26]*eps(u)[2] + t[27]*eps(u)[3] + t[28]*eps(u)[4] + t[29]*eps(u)[5]],\

				 [t[18]*eps(u)[0] + t[19]*eps(u)[1] + t[20]*eps(u)[2] + t[21]*eps(u)[3] + t[22]*eps(u)[4] + t[23]*eps(u)[5], \
					t[6]* eps(u)[0] + t[7]* eps(u)[1] + t[8]* eps(u)[2] + t[9]* eps(u)[3] + t[10]*eps(u)[4] + t[11]*eps(u)[5], \
					t[30]*eps(u)[0] + t[31]*eps(u)[1] + t[32]*eps(u)[2] + t[33]*eps(u)[3] + t[34]*eps(u)[4] + t[35]*eps(u)[5]],\

				 [t[24]*eps(u)[0] + t[25]*eps(u)[1] + t[26]*eps(u)[2] + t[27]*eps(u)[3] + t[28]*eps(u)[4] + t[29]*eps(u)[5], \
					t[30]*eps(u)[0] + t[31]*eps(u)[1] + t[32]*eps(u)[2] + t[33]*eps(u)[3] + t[34]*eps(u)[4] + t[35]*eps(u)[5], \
					t[12]*eps(u)[0] + t[13]*eps(u)[1] + t[14]*eps(u)[2] + t[15]*eps(u)[3] + t[16]*eps(u)[4] + t[17]*eps(u)[5]])

a = dot(grad(v), dsigma(u) )*dx 
L = dot(v,b)*dx - dot(grad(v), sigma(s))*dx
