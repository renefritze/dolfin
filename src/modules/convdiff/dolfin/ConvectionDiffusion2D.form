# Copyright (C) 2005-2006 Johan Hoffman and Anders Logg.
# Licensed under the GNU GPL Version 2.
#
# Modified by Garth N. Wells 2005
#
# First added:  2005-04-04
# Last changed: 2006-03-28
#
# The bilinear form a(v, U) and linear form L(v) for
# convection-diffusion using cG(1)cG(1) with SUPG stabilisation.
#
# Compile this form with FFC: ffc ConvectionDiffusion.form.

scalar   = FiniteElement("Lagrange", "triangle", 1)
vector   = FiniteElement("Vector Lagrange", "triangle", 1)
constant = FiniteElement("Discontinuous Lagrange", "triangle", 0)

v    = TestFunction(scalar)  # test function
U1   = TrialFunction(scalar) # value at next time step
U0   = Function(scalar)      # value at previous time step
w    = Function(vector)      # convection
stab = Function(scalar)      # tau/2|w|
f    = Function(scalar)      # source term
h    = Function(constant)    # element size
k    = Constant()            # time step
c    = Constant()            # diffusion

beta = mult(h,stab)  # stabiliation term
r1   = dot(w, grad(U1)) - c*div(grad(U1)) # "steady" residual at next time step
r0   = dot(w, grad(U0)) - c*div(grad(U0)) # "steady" residual at previous time step
SUPG = beta*dot(w, grad(v))               # SUPG weighting

a_galerkin  = v*U1*dx + 0.5*k*(v*dot(w, grad(U1))*dx + c*dot( grad(v), grad(U1) )*dx) 
a_stabilise = SUPG*U1*dx + 0.5*k*SUPG*r1*dx

L_galerkin  = v*U0*dx - 0.5*k*(v*dot(w, grad(U0))*dx + c*dot(grad(v), grad(U0))*dx) + v*f*dx 
L_stabilise = SUPG*U0*dx - 0.5*k*SUPG*r0*dx + SUPG*f*dx

a = a_galerkin + a_stabilise
L = L_galerkin + L_stabilise
