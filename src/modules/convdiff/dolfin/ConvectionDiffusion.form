# Copyright (C) 2005 Johan Hoffman and Anders Logg.
# Licensed under the GNU GPL Version 2.
#
# Modified by Garth N. Wells 2005
#
# First added:  2005-04-04
# Last changed: 2005-07-08
#
# The bilinear form a(u,v) and linear form L(v) for
# convection-diffusion using cG(1)cG(1) with SUPG stabilisation.
#
# Compile this form with FFC: ffc ConvectionDiffusion.form.

scalar = FiniteElement("Lagrange", "triangle", 1)
vector = FiniteElement("Vector Lagrange", "triangle", 1)
constant = FiniteElement("Discontinuous Lagrange", "triangle", 0)

v           = BasisFunction(scalar) # test function
u1          = BasisFunction(scalar) # value at next time step
u0          = Function(scalar)      # value at previous time step
w           = Function(vector)      # convection
inv_w_norm  = Function(scalar)      # 1/|w|
f           = Function(scalar)      # source term
h           = Function(constant)    # element size
k           = Constant()            # time step
c           = Constant()            # diffusion
tau         = Constant()            # stabilisation parameter

beta         = tau*0.5*h*inv_w_norm               # stabiliation term
residual1    = (w[j]*u1.dx(j) - c*u1.dx(j).dx(j)) # "steady" residual at next time step
residual0    = (w[j]*u0.dx(j) - c*u0.dx(j).dx(j)) # "steady" residual at previous time step
SUPG_weight  = beta*w[i]*v.dx(i)                  # SUPG weighting

a = v*u1*dx + SUPG_weight*u1*dx + 0.5*k*(v*w[i]*u1.dx(i)*dx + c*v.dx(i)*u1.dx(i)*dx  + SUPG_weight*residual1*dx)  
L = v*u0*dx + SUPG_weight*u0*dx - 0.5*k*(v*w[i]*u0.dx(i)*dx + c*v.dx(i)*u0.dx(i)*dx  + SUPG_weight * residual0*dx)  + v*f*dx + SUPG_weight*f*dx
