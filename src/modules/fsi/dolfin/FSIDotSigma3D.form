##########################################################
# Form for creating dotsigma
#
#  sigma_n+1 = sigma_n + k * dotsigma
##########################################################

name = "FSIDotSigma3D"

##########################################################

vector          = FiniteElement("Vector Lagrange", "tetrahedron", 1)
constant_tensor = FiniteElement("Discontinuous vector Lagrange", "tetrahedron", 0, 9)

##########################################################

dotsigma = TrialFunction(constant_tensor) # Change in sigma over time
q        = TestFunction(constant_tensor)  # Weak variable
u        = Function(vector)               # Velocity
mu       = Constant()                     # Lame coefficient
dummy    = Constant()			  # set to 1: needed - bug??

##########################################################

def epsilon(u):
    return 0.5 * (grad(u) + transp(grad(u)))

def E(e, mu):
    Ee = 2.0 * mult(mu, e) 
    return Ee

def tomatrix(q):
    return [ [q[3 * i + j] for i in range(3)] for j in range(3) ]

Eeu = E(epsilon(u), mu)

##########################################################

qmat        = tomatrix(q)
dotsigmamat = tomatrix(dotsigma)

a = dummy * dot(dotsigmamat, qmat) * dx
L = dot(Eeu, qmat) * dx

