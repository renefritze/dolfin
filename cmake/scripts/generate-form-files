#!/usr/bin/env python
#
# Copyright (C) 2005-2010 Anders Logg
#
# This file is part of DOLFIN.
#
# DOLFIN is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DOLFIN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with DOLFIN. If not, see <http://www.gnu.org/licenses/>.
#
# Recompile all ffc forms (use when FFC has been updated)
# This script should be run from the top level directory.

import os

# Forms that need special options
special = {"CahnHilliard2D.ufl":       "-fsplit",
           "CahnHilliard3D.ufl":       "-fsplit",
           "Poisson2D_1.ufl":         "-fsplit",
           "Poisson2D_2.ufl":         "-fsplit",
           "Poisson2D_3.ufl":         "-fsplit",
           "Poisson2D_4.ufl":         "-fsplit",
           "Poisson2D_5.ufl":         "-fsplit",
           "Poisson3D_1.ufl":         "-fsplit",
           "Poisson3D_2.ufl":         "-fsplit",
           "Poisson3D_3.ufl":         "-fsplit",
           "Poisson3D_4.ufl":         "-fsplit",
           "Poisson3D_5.ufl":         "-fsplit",
           "AdaptivePoisson.ufl":      "-e",
           "AdaptiveNavierStokes.ufl": "-e"}

# Forms for which we should skip optimization
skip_optimization = ["HyperElasticity.ufl"]

# Forms for which we don't want to generate functions for evaluating the basis
skip_basis = ["Poisson2D_5.ufl", "Poisson3D_4.ufl"]

# Directories to scan
subdirs = ["dolfin", "demo", "bench", "test"]

# Compile all form files
topdir = os.getcwd()
for subdir in subdirs:
    for root, dirs, files in os.walk(subdir):

        # Check for .ufl files
        formfiles = [f for f in files if len(f) > 4 and f[-4:] == ".ufl"]
        if len(formfiles) == 0:
            continue

        # Compile files
        os.chdir(root)
        print("Compiling forms in %s..." % root)
        for f in formfiles:
            if f in special:
                options = special[f]
            else:
                options = ""
            if f in skip_optimization:
                optimization = ""
            else:
                optimization = "-O"

            if f in skip_basis:
                options += " -fno-evaluate_basis -fno-evaluate_basis_derivatives"

            command = "ffc -v %s -f no_ferari -l dolfin %s %s >> compile.log" % (optimization, options, f)
            print("  " + command)
            ret = os.system(command)
            if not ret == 0:
                raise RuntimeError("Unable to compile form: %s/%s" % (root, f))
        os.chdir(topdir)
